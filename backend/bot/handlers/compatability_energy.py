from datetime import datetime

from aiogram import F, Router, flags
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from bot.keyboards.inline import (
    compatability_energy_kb,
    get_to_registration_kb,
    get_to_subscription_plans_kb,
    show_connection_depth,
)
from bot.states import CompatabilityEnergyState
from bot.templates.compatability_energy import get_compatability_energy_text
from core.models import Actions, Client

# TODO: –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–Ω–æ–ø–∫–∏

router = Router()


@router.message(F.text == 'üíû –≠–Ω–µ—Ä–≥–∏—è –≤–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏')
@flags.with_client
async def compatability_energy(
    msg: Message, state: FSMContext, client: Client
):
    if not client.is_registered():
        await msg.answer(
            '–¢—ã —Ö–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å –≤–∞—Å,\n'
            '–Ω–æ –µ—â—ë –Ω–µ –∑–∞–≥–ª—è–Ω—É–ª(–∞) –≤ —Å–µ–±—è?\n\n'
            '–ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –∏ —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ —Å–ø–ª–µ—Ç–∞–µ—Ç—Å—è –≤–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è.',
            reply_markup=get_to_registration_kb(),
        )
        return

    if client.action_limit_exceed(Actions.COMPATABILITY_ENERGY):
        await msg.answer(
            '–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Ç—Ä–µ–º—è –ª—é–¥—å–º–∏.\n'
            '–ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è —Å–≤—è–∑—å ‚Äî —ç—Ç–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–±—è.\n\n'
            '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –µ—â—ë —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n'
            'üîπ 1 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ‚Üí 159 ‚ÇΩ –∏–ª–∏ 250 –∞—Å—Ç—Ä–æ–±–∞–ª–ª–æ–≤\n'
            'üîπ 3 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Üí 399 ‚ÇΩ –∏–ª–∏ 650 –∞—Å—Ç—Ä–æ–±–∞–ª–ª–æ–≤\n'
            'üîπ VIP-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n'
            '–¢—ã –≥–æ—Ç–æ–≤(–∞) –∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –≥–ª—É–±–∏–Ω–µ?\n'
            '–≠—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ ‚Äú–ø–æ–¥—Ö–æ–¥–∏—Ç–µ –≤—ã –¥—Ä—É–≥ –¥—Ä—É–≥—É –∏–ª–∏ –Ω–µ—Ç‚Äù.\n'
            '–≠—Ç–æ —Ä–∞–∑–±–æ—Ä, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –æ–±–∞ —É–≤–∏–¥–∏—Ç–µ —Å–µ–±—è –∏–Ω–∞—á–µ.\n\n'
            '–ü–∞—Ä–∞. –°–µ–º—å—è. –ö–æ–º–∞–Ω–¥–∞. –î—Ä—É–∑—å—è.\n'
            '–í—ã–±–∏—Ä–∞–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –∏ –Ω—ã—Ä—è–µ–º –≤–≥–ª—É–±—å.\n\n',
            reply_markup=show_connection_depth,
        )
        return

    if client.subscription_is_active():
        await state.set_state(CompatabilityEnergyState.connection_type)
        await msg.answer(
            '–°–ª—É—á–∞–π–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–µ –±—ã–≤–∞–µ—Ç.\n'
            '–Ø –ø–æ–∫–∞–∂—É, –ø–æ—á–µ–º—É —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —Ä—è–¥–æ–º ‚Äî –∏ —á–µ–º—É –≤—ã —É—á–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.\n\n'
            '–¢—ã –≥–æ—Ç–æ–≤(–∞) –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –≤–∞—à—É —Å–≤—è–∑—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É?',
            reply_markup=compatability_energy_kb,
        )
    else:
        await msg.answer(
            '–°–≤—è–∑—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å,\n'
            '–Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∑–∞ –ø–∞—Ä—É —Å—Ç—Ä–æ–∫.\n\n'
            '–ü—Ä–æ–¥–æ–ª–∂–∏ –ø—É—Ç—å ‚Äî –∏ —è –ø–æ–∫–∞–∂—É, —á—Ç–æ –º–µ–∂–¥—É –≤–∞–º–∏ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ.',
            reply_markup=get_to_subscription_plans_kb(),
        )


@router.callback_query(
    F.data.in_(('together', 'like', 'past_lovers')),
    StateFilter(CompatabilityEnergyState.connection_type),
)
async def set_connection_type(query: CallbackQuery, state: FSMContext):
    await state.update_data(connection_type=query.data)
    await state.set_state(CompatabilityEnergyState.birth_date_2)
    await query.message.edit_text(
        'üìÜ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–≤–µ—Ä—è–µ—à—å —Å–≤—è–∑—å '
        '–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.',
    )


@router.message(F.text, StateFilter(CompatabilityEnergyState.birth_date_2))
@flags.with_client
async def get_first_person_birth_date(
    msg: Message,
    state: FSMContext,
    client: Client,
):
    try:
        birth_date_2 = datetime.strptime(msg.text, '%d.%m.%Y')
    except ValueError:
        await msg.answer(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
        )
        return

    await msg.answer(
        get_compatability_energy_text(
            await state.get_value('connection_type'),
            client.birth.date(),
            birth_date_2,
        ),
        reply_markup=show_connection_depth,
    )
    await state.clear()
