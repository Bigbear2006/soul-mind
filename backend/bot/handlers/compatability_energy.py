from datetime import datetime

from aiogram import F, Router, flags
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
)

from bot.keyboards.inline.base import (
    get_to_registration_kb,
    get_to_subscription_plans_kb,
)
from bot.keyboards.inline.compatability_energy import (
    compatability_energy_kb,
    get_buy_compatability_kb,
    show_connection_depth,
    trial_usages_ended_kb,
)
from bot.keyboards.inline.vip_services import get_payment_choices_kb
from bot.services.compatability_energy import get_compatability_energy_text
from bot.settings import settings
from bot.states import CompatabilityEnergyState
from bot.text_templates.base import astropoints_not_enough
from bot.utils.formatters import compatability_plural, remaining_plural
from core.choices import Genders, SubscriptionPlans
from core.models import Actions, Client

router = Router()


@router.message(F.text == 'üíû –≠–Ω–µ—Ä–≥–∏—è –≤–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏')
@router.callback_query(F.data == 'compatability_energy')
@flags.with_client
async def compatability_energy(
    msg: Message | CallbackQuery,
    state: FSMContext,
    client: Client,
):
    await client.refresh_limit(Actions.COMPATABILITY_ENERGY)
    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.edit_text
    )

    if not client.is_registered():
        await answer_func(
            client.genderize(
                '–¢—ã —Ö–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å –≤–∞—Å,\n'
                '–Ω–æ –µ—â—ë –Ω–µ {gender:–∑–∞–≥–ª—è–Ω—É–ª,–∑–∞–≥–ª—è–Ω—É–ª–∞} –≤ —Å–µ–±—è?\n\n'
                '–ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –∏ —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ —Å–ø–ª–µ—Ç–∞–µ—Ç—Å—è –≤–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è.',
            ),
            reply_markup=get_to_registration_kb(),
        )
        return

    remaining_usages = await client.get_remaining_usages(
        Actions.COMPATABILITY_ENERGY,
    )

    if remaining_usages <= 0:
        if client.has_trial():
            await answer_func(
                client.genderize(
                    '–¢—ã —É–∂–µ {gender:–ø–æ—Å–º–æ—Ç—Ä–µ–ª,–ø–æ—Å–º–æ—Ç—Ä–µ–ª–∞} –¥–≤–µ —ç–Ω–µ—Ä–≥–∏–∏. '
                    '–ò, –≤–æ–∑–º–æ–∂–Ω–æ, {gender:–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª,–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞}, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n'
                    '–ù–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–æ—Å—Ç—É–ø–µ —ç—Ç–æ –º–∞–∫—Å–∏–º—É–º.'
                    '–ù–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –≥–ª—É–±–∂–µ ‚Äî —É —Ç–µ–±—è –µ—Å—Ç—å –¥–≤–∞ –ø—É—Ç–∏:',
                ),
                reply_markup=trial_usages_ended_kb,
            )
            return

        await answer_func(
            client.genderize(
                '–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Ç—Ä–µ–º—è –ª—é–¥—å–º–∏.\n'
                '–ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è —Å–≤—è–∑—å ‚Äî —ç—Ç–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–±—è.\n\n'
                '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –µ—â—ë —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n'
                'üîπ 1 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ‚Üí 159 ‚ÇΩ –∏–ª–∏ 250 –∞—Å—Ç—Ä–æ–±–∞–ª–ª–æ–≤\n'
                'üîπ 3 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Üí 399 ‚ÇΩ –∏–ª–∏ 650 –∞—Å—Ç—Ä–æ–±–∞–ª–ª–æ–≤\n'
                'üîπ VIP-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n'
                '–¢—ã {gender:–≥–æ—Ç–æ–≤,–≥–æ—Ç–æ–≤–∞} –∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –≥–ª—É–±–∏–Ω–µ?\n'
                '–≠—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ ‚Äú–ø–æ–¥—Ö–æ–¥–∏—Ç–µ –≤—ã –¥—Ä—É–≥ –¥—Ä—É–≥—É –∏–ª–∏ –Ω–µ—Ç‚Äù.\n'
                '–≠—Ç–æ —Ä–∞–∑–±–æ—Ä, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –æ–±–∞ —É–≤–∏–¥–∏—Ç–µ —Å–µ–±—è –∏–Ω–∞—á–µ.\n\n'
                '–ü–∞—Ä–∞. –°–µ–º—å—è. –ö–æ–º–∞–Ω–¥–∞. –î—Ä—É–∑—å—è.\n'
                '–í—ã–±–∏—Ä–∞–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –∏ –Ω—ã—Ä—è–µ–º –≤–≥–ª—É–±—å.\n\n',
            ),
            reply_markup=get_buy_compatability_kb(),
        )
        return

    if client.subscription_is_active() or client.has_trial():
        remaining_usages_str = (
            f'* –£ —Ç–µ–±—è {remaining_plural(remaining_usages, Genders.FEMALE)} {remaining_usages} '
            f'{compatability_plural(remaining_usages)}'
            if client.subscription_plan != SubscriptionPlans.PREMIUM
            else ''
        )
        await state.set_state(CompatabilityEnergyState.connection_type)
        await answer_func(
            client.genderize(
                '–°–ª—É—á–∞–π–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–µ –±—ã–≤–∞–µ—Ç.\n'
                '–Ø –ø–æ–∫–∞–∂—É, –ø–æ—á–µ–º—É —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —Ä—è–¥–æ–º ‚Äî –∏ —á–µ–º—É –≤—ã —É—á–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.\n\n'
                '–¢—ã {gender:–≥–æ—Ç–æ–≤,–≥–æ—Ç–æ–≤–∞} –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –≤–∞—à—É —Å–≤—è–∑—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É?\n\n'
                f'{remaining_usages_str}',
            ),
            reply_markup=compatability_energy_kb,
        )
    else:
        await answer_func(
            '–°–≤—è–∑—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å,\n'
            '–Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∑–∞ –ø–∞—Ä—É —Å—Ç—Ä–æ–∫.\n\n'
            '–ü—Ä–æ–¥–æ–ª–∂–∏ –ø—É—Ç—å ‚Äî –∏ —è –ø–æ–∫–∞–∂—É, —á—Ç–æ –º–µ–∂–¥—É –≤–∞–º–∏ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ.',
            reply_markup=get_to_subscription_plans_kb(),
        )


###############################
### BUY EXTRA COMPATABILITY ###
###############################


@router.callback_query(F.data == 'buy_compatability_choices')
async def buy_compatability_choices(query: CallbackQuery):
    await query.message.edit_reply_markup(
        reply_markup=get_buy_compatability_kb(
            back_button_data='compatability_energy',
        ),
    )


@router.callback_query(F.data.startswith('buy_compatability'))
async def buy_compatability(query: CallbackQuery, state: FSMContext):
    buy_count = query.data.split(':')[1]
    await state.update_data(buy_count=buy_count)
    await state.set_state(CompatabilityEnergyState.payment_type)
    await query.message.edit_text(
        '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã',
        reply_markup=get_payment_choices_kb(
            '250 –±–∞–ª–ª–æ–≤' if buy_count == 'one' else '650 –±–∞–ª–ª–æ–≤',
            '159 ‚ÇΩ' if buy_count == 'one' else '399 ‚ÇΩ',
            back_button_data='buy_compatability_choices',
        ),
    )


@router.callback_query(
    F.data.in_(('astropoints', 'money')),
    StateFilter(CompatabilityEnergyState.payment_type),
)
@flags.with_client
async def choose_compatability_payment_type(
    query: CallbackQuery,
    state: FSMContext,
    client: Client,
):
    buy_count = await state.get_value('buy_count')
    buy_count_str = '1' if buy_count == 'one' else '3'
    astropoints = 250 if buy_count == 'one' else 650
    money = 159 if buy_count == 'one' else 399

    if query.data == 'astropoints':
        if client.astropoints < astropoints:
            await query.message.edit_text(
                astropoints_not_enough,
                reply_markup=get_payment_choices_kb(
                    None,
                    '159 ‚ÇΩ' if buy_count == 'one' else '399 ‚ÇΩ',
                ),
            )
            return

        await client.add_extra_usages(
            action=Actions.COMPATABILITY_ENERGY,
            count=1 if await state.get_value('buy_count') == 'one' else 3,
        )
        client.astropoints -= astropoints
        await client.asave()

        remaining_usages = await client.get_remaining_usages(
            Actions.COMPATABILITY_ENERGY,
        )
        await query.message.edit_text(
            f'–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {remaining_usages} '
            f'{compatability_plural(remaining_usages)}!',
        )
        await state.clear()
    else:
        await query.message.answer_invoice(
            f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ({buy_count_str})',
            f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ({buy_count_str})',
            'extra_compatability',
            settings.CURRENCY,
            [LabeledPrice(label=settings.CURRENCY, amount=money * 100)],
            settings.PROVIDER_TOKEN,
        )
        await state.set_state(CompatabilityEnergyState.payment)


@router.pre_checkout_query(StateFilter(CompatabilityEnergyState.payment))
async def accept_pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(True)


@router.message(
    F.successful_payment,
    StateFilter(CompatabilityEnergyState.payment),
)
@flags.with_client
async def on_extra_compatability_buying(
    msg: Message,
    state: FSMContext,
    client: Client,
):
    await client.add_extra_usages(
        action=Actions.COMPATABILITY_ENERGY,
        count=1 if await state.get_value('buy_count') == 'one' else 3,
    )
    remaining_usages = await client.get_remaining_usages(
        Actions.COMPATABILITY_ENERGY,
    )
    await msg.answer(
        f'–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {remaining_usages} '
        f'{compatability_plural(remaining_usages)}!',
    )
    await state.clear()


##########################
### SHOW COMPATABILITY ###
##########################


@router.callback_query(
    F.data.in_(('together', 'like', 'past_lovers')),
    StateFilter(CompatabilityEnergyState.connection_type),
)
async def set_connection_type(query: CallbackQuery, state: FSMContext):
    await state.update_data(connection_type=query.data)
    await state.set_state(CompatabilityEnergyState.birth_date_2)
    await query.message.edit_text(
        'üìÜ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–≤–µ—Ä—è–µ—à—å —Å–≤—è–∑—å '
        '–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.',
    )


@router.message(F.text, StateFilter(CompatabilityEnergyState.birth_date_2))
@flags.with_client
async def get_first_person_birth_date(
    msg: Message,
    state: FSMContext,
    client: Client,
):
    try:
        birth_date_2 = datetime.strptime(msg.text, '%d.%m.%Y')
    except ValueError:
        await msg.answer(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
        )
        return

    await msg.answer(
        get_compatability_energy_text(
            await state.get_value('connection_type'),
            client,
            birth_date_2,
        ),
        reply_markup=show_connection_depth,
    )
    await client.spend_usage(Actions.COMPATABILITY_ENERGY)
    await state.clear()
