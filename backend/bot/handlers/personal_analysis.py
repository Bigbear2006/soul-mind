from aiogram import F, Router, flags
from aiogram.enums import ParseMode
from aiogram.types import BufferedInputFile, CallbackQuery, Message

from bot.keyboards.inline.base import get_to_subscription_plans_kb
from bot.services.personal_analysis.career_and_finance import (
    get_career_and_finance_intro,
    get_career_and_finance_text,
)
from bot.services.personal_analysis.destiny_mystery import (
    get_destiny_mystery_intro,
    get_destiny_mystery_text,
)
from bot.services.personal_analysis.full_profile import (
    get_full_profile_intro,
    get_full_profile_text,
)
from bot.services.personal_analysis.intro import get_personal_analysis_intro
from bot.services.personal_analysis.love_code import (
    get_love_code_intro,
    get_love_code_text,
)
from bot.services.personal_analysis.superpower import (
    get_superpower_intro,
    get_superpower_text,
)
from bot.utils.pdf import generate_pdf
from core.models import Client

router = Router()


@router.message(F.text == 'üìå –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä')
@router.callback_query(F.data == 'to_personal_analysis')
@flags.with_client
async def personal_analysis_handler(
    msg: Message | CallbackQuery,
    client: Client,
):
    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.edit_text
    )
    text, reply_markup = get_personal_analysis_intro(client)
    await answer_func(text=text, reply_markup=reply_markup)


@router.callback_query(F.data == 'destiny_mystery')
@flags.with_client
async def destiny_mystery(query: CallbackQuery, client: Client):
    text, reply_markup = get_destiny_mystery_intro(client)
    await query.message.edit_text(text, reply_markup=reply_markup)


@router.callback_query(F.data == 'show_destiny_mystery')
@flags.with_client
async def show_destiny_mystery(query: CallbackQuery, client: Client):
    kwargs = {}
    if not client.subscription_is_active():
        kwargs = {
            'caption': client.genderize(
                '<b>–¢—ã {gender:—É–≤–∏–¥–µ–ª,—É–≤–∏–¥–µ–ª–∞} –ª–∏—à—å –≤–µ—Ä—Ö—É—à–∫—É.</b>\n'
                '–ü–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ–∫–∞–∂–µ—Ç, <b>–∫—É–¥–∞ –≤–µ–¥—ë—Ç —Ç–≤–æ–π –ø—É—Ç—å</b> ‚Äî –∏ –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∏–¥—Ç–∏ –≤ –æ–±—Ö–æ–¥.\n'
                '<b>–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É</b>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—ë.',
            ),
            'parse_mode': ParseMode.HTML,
            'reply_markup': get_to_subscription_plans_kb(
                text='‚ú® –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø',
            ),
        }

    await query.message.answer_document(
        BufferedInputFile(
            generate_pdf(get_destiny_mystery_text(client)),
            '–¢–∞–π–Ω–∞ —Ç–≤–æ–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.pdf',
        ),
        **kwargs,
    )


@router.callback_query(F.data == 'career_and_finance')
@flags.with_client
async def career_and_finance(query: CallbackQuery, client: Client):
    text, reply_markup = get_career_and_finance_intro(client)
    await query.message.edit_text(text, reply_markup=reply_markup)


@router.callback_query(F.data == 'show_career_and_finance')
@flags.with_client
async def show_career_and_finance(query: CallbackQuery, client: Client):
    kwargs = {}
    if not client.subscription_is_active():
        kwargs = {
            'caption': client.genderize(
                '<b>–¢—ã {gender:—É–∑–Ω–∞–ª,—É–∑–Ω–∞–ª–∞}, –≥–¥–µ –ø—Ä–æ–±–µ–≥–∞–µ—Ç –∏—Å–∫—Ä–∞.</b>\n'
                '–ù–æ –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî <b>—Ç–≤–æ–∏ –¥–µ–Ω–µ–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞ –∏ —Ç–æ—á–∫–∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.</b>\n'
                '<b>–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É</b>, –∏ —è –ø–æ–∫–∞–∂—É –≤–µ—Å—å –º–∞—Ä—à—Ä—É—Ç.',
            ),
            'parse_mode': ParseMode.HTML,
            'reply_markup': get_to_subscription_plans_kb(
                text='‚ú® –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø',
            ),
        }

    await query.message.answer_document(
        BufferedInputFile(
            generate_pdf(get_career_and_finance_text(client)),
            '–ö–∞—Ä—å–µ—Ä–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã.pdf',
        ),
        **kwargs,
    )


@router.callback_query(F.data == 'love_code')
@flags.with_client
async def love_code(query: CallbackQuery, client: Client):
    text, reply_markup = get_love_code_intro(client)
    await query.message.edit_text(text, reply_markup=reply_markup)


@router.callback_query(F.data == 'show_love_code')
@flags.with_client
async def show_love_code(query: CallbackQuery, client: Client):
    kwargs = {}
    if not client.subscription_is_active():
        kwargs = {
            'caption': client.genderize(
                '<b>–°–µ–π—á–∞—Å —Ç—ã {gender:–ø—Ä–∏–∫–æ—Å–Ω—É–ª—Å—è,–ø—Ä–∏–∫–æ—Å–Ω—É–ª–∞—Å—å} –∫ –Ω–∞—á–∞–ª—É.</b>\n'
                '–ê –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞—Å–∫—Ä–æ–µ—Ç: <b>–∫–∞–∫ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∫–æ–≥–æ –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—à—å ‚Äî –∏ –ø–æ—á–µ–º—É.</b>\n'
                '–ì–ª—É–±–∏–Ω–∞ –ª—é–±–≤–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å.',
            ),
            'parse_mode': ParseMode.HTML,
            'reply_markup': get_to_subscription_plans_kb(
                text='‚ú® –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å —Ä–∞–∑–±–æ—Ä',
            ),
        }

    await query.message.answer_document(
        BufferedInputFile(
            generate_pdf(get_love_code_text(client)),
            '–¢–≤–æ–π –∫–æ–¥ –ª—é–±–≤–∏.pdf',
        ),
        **kwargs,
    )


@router.callback_query(F.data == 'superpower')
@flags.with_client
async def superpower(query: CallbackQuery, client: Client):
    text, reply_markup = get_superpower_intro(client)
    await query.message.edit_text(text, reply_markup=reply_markup)


@router.callback_query(F.data == 'show_superpower')
@flags.with_client
async def show_superpower(query: CallbackQuery, client: Client):
    kwargs = {}
    if not client.subscription_is_active():
        kwargs = {
            'caption': client.genderize(
                '<b>–Ø —Ç–æ–ª—å–∫–æ –Ω–∞–º–µ–∫–Ω—É–ª–∞.</b>\n'
                '–ü–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ–∫–∞–∂–µ—Ç, <b>—á—Ç–æ –≤ —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å–∏–ª–∞ ‚Äî '
                '–¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —ç—Ç–æ —Å–ª–∞–±–æ—Å—Ç—å—é.</b>\n'
                '{gender:–ì–æ—Ç–æ–≤,–ì–æ—Ç–æ–≤–∞} —É–≤–∏–¥–µ—Ç—å –≤—Å—é —Å–≤–æ—é –º–æ—â—å?',
            ),
            'parse_mode': ParseMode.HTML,
            'reply_markup': get_to_subscription_plans_kb(
                text='‚ú® –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø',
            ),
        }

    await query.message.answer_document(
        BufferedInputFile(
            generate_pdf(get_superpower_text(client)),
            '–¢–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞.pdf',
        ),
        **kwargs,
    )


@router.callback_query(F.data == 'full_profile')
@flags.with_client
async def full_profile(query: CallbackQuery, client: Client):
    text, reply_markup = get_full_profile_intro(client)
    await query.message.edit_text(text, reply_markup=reply_markup)


@router.callback_query(F.data == 'show_full_profile')
@flags.with_client
async def show_full_profile(query: CallbackQuery, client: Client):
    intro, content, conclusion = get_full_profile_text(client)
    if not client.subscription_is_active():
        text = '\n\n'.join([intro, *content])
        await query.message.answer_document(
            BufferedInputFile(generate_pdf(text), '–¢–≤–æ–π –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.pdf'),
        )
        await query.message.answer(
            conclusion,
            parse_mode=ParseMode.HTML,
            reply_markup=get_to_subscription_plans_kb(
                text='‚ú® –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            ),
        )
        return

    text = '\n\n'.join([intro, *content, conclusion])
    await query.message.answer_document(
        BufferedInputFile(generate_pdf(text), '–¢–≤–æ–π –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.pdf'),
    )
