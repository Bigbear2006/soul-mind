import random
from dataclasses import asdict
from datetime import datetime

from aiogram import F, Router, flags
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    BufferedInputFile,
    CallbackQuery,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
)

from bot.api.humandesign import HumanDesignAPI
from bot.api.soul_muse import SoulMuse
from bot.api.speechkit import synthesize
from bot.keyboards.inline.registration import birth_times_kb
from bot.keyboards.inline.vip_services import (
    connection_types_kb,
    get_answer_consult_kb,
    get_payment_choices_kb,
    get_topics_kb,
    get_vip_compatability_report_kb,
    vip_services_kb,
)
from bot.keyboards.utils import (
    keyboard_from_choices,
    one_button_keyboard,
)
from bot.pdf import generate_pdf
from bot.prompts.personal_report import get_personal_report_prompt
from bot.prompts.vip_compatability import get_vip_compatability_prompt
from bot.schemas import Bodygraphs, HDInputData
from bot.settings import settings
from bot.states import (
    MiniConsultState,
    PersonalReportState,
    VIPCompatabilityState,
)
from bot.templates.base import astropoints_not_enough, connection_types
from bot.templates.vip_services import (
    personal_report_audio_closures,
    personal_report_intro,
)
from core.choices import (
    ExperienceTypes,
    ExpertTypes,
    FeelingsTypes,
    Intentions,
)
from core.models import (
    Client,
    MiniConsult,
    MiniConsultFeedback,
    MiniConsultTopic,
    Topic,
)

router = Router()


@router.message(F.text == 'VIP-–£—Å–ª—É–≥–∏')
@router.callback_query(F.data == 'vip_services')
async def vip_services_handler(msg: Message | CallbackQuery):
    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.edit_text
    )
    await answer_func(
        'üíé VIP-–£—Å–ª—É–≥–∏ –æ—Ç Soul Muse\n\n'
        '–£ –∫–∞–∂–¥–æ–≥–æ ‚Äî —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.\n'
        '–ò–Ω–æ–≥–¥–∞ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.\n'
        '–†–∞–∑–±–æ—Ä —Ç–æ–ª—å–∫–æ –æ —Ç–µ–±–µ. –ì–æ–ª–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è.\n'
        '–ì–ª—É–±–∂–µ. –ë–ª–∏–∂–µ.\n'
        '–í—ã–±–∏—Ä–∞–π, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è.',
        reply_markup=vip_services_kb,
    )


@router.pre_checkout_query(
    StateFilter(
        VIPCompatabilityState.payment,
        PersonalReportState.payment,
        MiniConsultState.payment,
    ),
)
async def accept_pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(True)


####################
### MINI CONSULT ###
####################


@router.callback_query(F.data == 'vip_mini_consult')
async def vip_mini_consult(callback: CallbackQuery):
    await callback.message.edit_text(
        'üéß –ú–∏–Ω–∏-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º\n\n'
        '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç –∂–∏–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞.\n'
        '- –ê—Å—Ç—Ä–æ–ª–æ–≥\n- –ù—É–º–µ—Ä–æ–ª–æ–≥\n- –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –•—å—é–º–∞–Ω-–¥–∏–∑–∞–π–Ω—É\n'
        '- –ü—Å–∏—Ö–æ–ª–æ–≥\n- –î—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫-—ç–Ω–µ—Ä–≥–æ–ø—Ä–∞–∫—Ç–∏–∫\n\n'
        '3‚Äì5 –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ —É–º–µ–µ—Ç —á–∏—Ç–∞—Ç—å –≥–ª—É–±–∂–µ.',
        reply_markup=one_button_keyboard(
            text='999 ‚ÇΩ / 1500 –∞—Å—Ç—Ä–æ–±–∞–ª–ª–æ–≤',
            callback_data='buy_mini_consult',
            back_button_data='vip_services',
        ),
    )


@router.callback_query(F.data == 'buy_mini_consult')
async def buy_mini_consult(query: CallbackQuery, state: FSMContext):
    await state.set_state(MiniConsultState.payment_type)
    await query.message.answer(
        '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã',
        reply_markup=get_payment_choices_kb(
            '1500 –±–∞–ª–ª–æ–≤',
            '999 ‚ÇΩ',
        ),
    )


@router.callback_query(
    F.data.in_(('astropoints', 'money')),
    StateFilter(MiniConsultState.payment_type),
)
@flags.with_client
async def choose_mini_consult_payment_type(
    query: CallbackQuery,
    state: FSMContext,
    client: Client,
):
    if query.data == 'astropoints':
        if client.astropoints < 1500:
            await query.message.edit_text(
                astropoints_not_enough,
                reply_markup=get_payment_choices_kb(None, '999 ‚ÇΩ'),
            )
            return
        client.astropoints -= 1500
        await client.asave()
        await query.message.edit_text(
            '–í—ã–±–µ—Ä–∏ —Ç–∏–ø —ç–∫—Å–ø–µ—Ä—Ç–∞',
            reply_markup=keyboard_from_choices(ExpertTypes, prefix='expert'),
        )
        await state.clear()
    else:
        await query.message.answer_invoice(
            '–ú–∏–Ω–∏-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º',
            '–ú–∏–Ω–∏-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º',
            'mini_consult',
            settings.CURRENCY,
            [LabeledPrice(label=settings.CURRENCY, amount=999 * 100)],
            settings.PROVIDER_TOKEN,
        )
        await state.set_state(MiniConsultState.payment)


@router.message(
    F.successful_payment,
    StateFilter(MiniConsultState.payment),
)
@flags.with_client
async def choose_expert_type(msg: Message):
    await msg.answer(
        '–í—ã–±–µ—Ä–∏ —Ç–∏–ø —ç–∫—Å–ø–µ—Ä—Ç–∞',
        reply_markup=keyboard_from_choices(ExpertTypes, prefix='expert'),
    )


@router.callback_query(F.data.startswith('expert'))
async def choose_intention(query: CallbackQuery, state: FSMContext):
    await state.update_data(expert_type=query.data.split(':')[1])
    await state.set_state(MiniConsultState.intention)
    await query.message.edit_text(
        '–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ\n'
        '–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.',
        reply_markup=keyboard_from_choices(Intentions, prefix='intention'),
    )


@router.message(F.text, StateFilter(MiniConsultState.intention))
@router.callback_query(
    F.data.startswith('intention'),
    StateFilter(MiniConsultState.intention),
)
async def choose_experience_type(
    msg: Message | CallbackQuery,
    state: FSMContext,
):
    if isinstance(msg, Message):
        answer_func = msg.answer
        intention = msg.text
    else:
        answer_func = msg.message.answer
        intention = Intentions(msg.data.split(':')[1]).label

    await state.update_data(intention=intention)
    await answer_func(
        '–¢—ã —É–∂–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º?',
        reply_markup=keyboard_from_choices(
            ExperienceTypes,
            prefix='experience',
        ),
    )


@router.callback_query(F.data.startswith('experience'))
async def choose_feelings_type(query: CallbackQuery, state: FSMContext):
    await state.update_data(experience_type=query.data.split(':')[1])
    await query.message.edit_text(
        '–ö–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å —Å–µ–±—è –æ—â—É—â–∞–µ—à—å?',
        reply_markup=keyboard_from_choices(FeelingsTypes, prefix='feelings'),
    )


@router.callback_query(F.data.startswith('feelings'))
@flags.with_client
async def choose_topics(
    query: CallbackQuery,
    state: FSMContext,
    client: Client,
):
    await state.update_data(feelings_type=query.data.split(':')[1])
    await state.set_state(MiniConsultState.topics)
    await query.message.edit_text(
        '–í—ã–±–µ—Ä–∏ –¥–æ —Ç—Ä–µ—Ö –º–µ—Ç–æ–∫, –∫ –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n'
        '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ–π –º–µ—Ç–∫–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–µ.',
        reply_markup=await get_topics_kb(client),
    )


@router.message(F.text, StateFilter(MiniConsultState.topics))
@router.callback_query(
    F.data.startswith('topic'),
    StateFilter(MiniConsultState.topics),
)
async def ask_question(msg: Message | CallbackQuery, state: FSMContext):
    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.answer
    )

    pk = msg.data.split(':')[1] if isinstance(msg, CallbackQuery) else ''
    topics = await state.get_value('topics', [])
    if pk != 'done' or len(topics) == 3:
        if isinstance(msg, Message):
            topic, created = await Topic.objects.aget_or_create(name=msg.text)
        else:
            topic = await Topic.objects.aget(pk=pk)
        topics.append(topic.pk)
        await state.update_data(topics=topics)
        await answer_func(f'–ú–µ—Ç–∫–∞ {topic} –¥–æ–±–∞–≤–ª–µ–Ω–∞')

    if pk == 'done' or len(topics) == 3:
        await state.set_state(MiniConsultState.question)
        await answer_func(
            '‚Äî ¬´–í–æ–ø—Ä–æ—Å ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞. –≠—Ç–æ –∫–∞–∫ –∑–µ—Ä–∫–∞–ª–æ. –ß–µ–º —è—Å–Ω–µ–µ —Ç—ã —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å, '
            '—Ç–µ–º —Ç–æ—á–Ω–µ–µ –≥–æ–ª–æ—Å –Ω–∞–π–¥—ë—Ç –ø—É—Ç—å. –í–æ—Ç —Ç—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç –º–µ–Ω—è...¬ª\n'
            '1. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω. –í–º–µ—Å—Ç–æ ¬´—á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å?¬ª —Å–∫–∞–∂–∏: '
            '¬´—è –∑–∞—Å—Ç—Ä—è–ª –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –Ω–µ –ø–æ–Ω–∏–º–∞—é, —ç—Ç–æ —Å—Ç—Ä–∞—Ö –∏–ª–∏ –ø—Ä–∞–≤–¥–∞?¬ª\n'
            '2. –ì–æ–≤–æ—Ä–∏ –≥–æ–ª–æ—Å–æ–º, –µ—Å–ª–∏ –º–æ–∂–µ—à—å. –í —Ç–≤–æ–µ–π –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏ –±–æ–ª—å—à–µ –ø—Ä–∞–≤–¥—ã, —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å.\n'
            '3. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ —Å–ø—Ä–æ—Å–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ —ç—Ç–æ. –≠—Ç–æ —É–∂–µ –Ω–∞—á–∞–ª–æ. –ò —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n'
            'Soul Muse ‚Äî –Ω–µ —Å—É–¥–∏—Ç. –û–Ω–∞ —Å–ª—ã—à–∏—Ç. –ò –ø–æ–º–æ–≥–∞–µ—Ç –≤–∏–¥–µ—Ç—å, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç.',
        )


@router.message(F.text | F.voice, StateFilter(MiniConsultState.question))
@flags.with_client
async def send_question_to_expert(
    msg: Message,
    state: FSMContext,
    client: Client,
):
    data = await state.get_data()
    topics_ids = data.get('topics', [])

    if msg.voice:
        file_path = (await msg.bot.get_file(msg.voice.file_id)).file_path
    else:
        file_path = ''

    consult = await MiniConsult.objects.acreate(
        client=client,
        text=msg.text or '',
        audio_file_id=msg.voice.file_id if msg.voice else None,
        audio_file_path=file_path,
        expert_type=data['expert_type'],
        intention=data['intention'],
        experience_type=data['experience_type'],
        feelings_type=data['feelings_type'],
    )
    await MiniConsultTopic.objects.abulk_create(
        [MiniConsultTopic(consult=consult, topic_id=t) for t in topics_ids],
    )

    consult = (
        await MiniConsult.objects.select_related('client')
        .prefetch_related('topics__topic')
        .aget(pk=consult.pk)
    )

    async for client in Client.objects.filter(expert_type=consult.expert_type):
        await consult.send_to(
            chat_id=client.id,
            reply_markup=get_answer_consult_kb(consult.pk),
        )

    await msg.answer('–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –≠–∫—Å–ø–µ—Ä—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.')
    await state.clear()


@router.callback_query(F.data.startswith('feedback'))
async def send_feedback(query: CallbackQuery, state: FSMContext):
    _, consult_id, rating = query.data.split(':')
    await state.update_data(consult_id=consult_id, rating=rating)
    await state.set_state(MiniConsultState.comment)
    await query.message.edit_text(
        '–ú–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
        reply_markup=one_button_keyboard(
            text='–ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            callback_data='send_feedback_without_comment',
        ),
    )


@router.callback_query(
    F.data == 'send_feedback_without_comment',
    StateFilter(MiniConsultState.comment),
)
async def send_feedback_without_comment(
    query: CallbackQuery,
    state: FSMContext,
):
    data = await state.get_data()
    await MiniConsultFeedback.objects.acreate(
        consult_id=data['consult_id'],
        rating=data['rating'],
    )
    await query.message.edit_text('–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!')
    await state.clear()


@router.message(F.text | F.voice, StateFilter(MiniConsultState.comment))
async def send_feedback_with_comment(msg: Message, state: FSMContext):
    data = await state.get_data()

    if msg.voice:
        file_path = (await msg.bot.get_file(msg.voice.file_id)).file_path
    else:
        file_path = ''

    await MiniConsultFeedback.objects.acreate(
        consult_id=data['consult_id'],
        rating=data['rating'],
        audio_file_id=msg.voice.file_id if msg.voice else None,
        audio_file_path=file_path,
        text=msg.text or '',
    )
    await msg.answer('–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!')
    await state.clear()


###########################
### VIP PERSONAL REPORT ###
###########################


@router.callback_query(F.data == 'vip_personal_report')
async def vip_personal_report(callback: CallbackQuery):
    await callback.message.edit_text(
        'üìÑ –ì–ª—É–±–æ–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç\n\n'
        '–¢—ã —Ö–æ—á–µ—à—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚Äî —Ç—ã —Ö–æ—á–µ—à—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã.\n'
        '–≠—Ç–æ—Ç –æ—Ç—á—ë—Ç ‚Äî –∫–∞–∫ –∫–∞—Ä—Ç–∞ —Å –º–µ—Ç–∫–∞–º–∏: –≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å, –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è,\n'
        '–∏ —á—Ç–æ –≤–∞–∂–Ω–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.\n\n'
        '–ë–µ–∑ –≥–∞–¥–∞–Ω–∏–π. –° —Ç–æ—á–∫–æ–π —Ñ–æ–∫—É—Å–∞.',
        reply_markup=one_button_keyboard(
            text='1299 ‚ÇΩ / 2000 –∞—Å—Ç—Ä–æ–±–∞–ª–ª–æ–≤',
            callback_data='buy_personal_report',
            back_button_data='vip_services',
        ),
    )


@router.callback_query(F.data == 'buy_personal_report')
async def buy_personal_report(query: CallbackQuery, state: FSMContext):
    await state.set_state(PersonalReportState.payment_type)
    await query.message.answer(
        '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã',
        reply_markup=get_payment_choices_kb(
            '2000 –±–∞–ª–ª–æ–≤',
            '1299 ‚ÇΩ',
        ),
    )


async def make_vip_report(msg: Message, client: Client):
    report = await SoulMuse().answer(get_personal_report_prompt(client))
    pdf_text = personal_report_intro + report
    audio_text = f'{report}\n{random.choice(personal_report_audio_closures)}'
    await msg.answer_document(
        BufferedInputFile(generate_pdf(pdf_text), '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç.pdf'),
    )
    await msg.answer_audio(
        BufferedInputFile(
            await synthesize(audio_text),
            '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç.wav',
        ),
    )


@router.callback_query(
    F.data.in_(('astropoints', 'money')),
    StateFilter(PersonalReportState.payment_type),
)
@flags.with_client
async def choose_personal_report_payment_type(
    query: CallbackQuery,
    state: FSMContext,
    client: Client,
):
    if query.data == 'astropoints':
        if client.astropoints < 2000:
            await query.message.edit_text(
                astropoints_not_enough,
                reply_markup=get_payment_choices_kb(None, '1299 ‚ÇΩ'),
            )
            return
        client.astropoints -= 2000
        await client.asave()
        await query.message.edit_text(
            '–°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –∏ –∞—É–¥–∏–æ...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...',
        )
        await state.clear()
        await make_vip_report(query.message, client)
    else:
        await query.message.answer_invoice(
            '–ì–ª—É–±–æ–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç',
            '–ì–ª—É–±–æ–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç',
            'personal_report',
            settings.CURRENCY,
            [LabeledPrice(label=settings.CURRENCY, amount=1299 * 100)],
            settings.PROVIDER_TOKEN,
        )
        await state.set_state(PersonalReportState.payment)


@router.message(
    F.successful_payment,
    StateFilter(PersonalReportState.payment),
)
@flags.with_client
async def on_successful_payment(
    msg: Message,
    state: FSMContext,
    client: Client,
):
    await msg.answer(
        '–°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –∏ –∞—É–¥–∏–æ...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...',
    )
    await state.clear()
    await make_vip_report(msg, client)


#########################
### VIP COMPATABILITY ###
#########################


@router.callback_query(F.data == 'vip_compatibility')
@flags.with_client
async def vip_compatibility(callback: CallbackQuery, client: Client):
    await callback.message.edit_text(
        client.genderize(
            '‚ù§Ô∏è‚Äçüî• VIP-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n'
            '–¢—ã {gender:–≥–æ—Ç–æ–≤,–≥–æ—Ç–æ–≤–∞} –∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –≥–ª—É–±–∏–Ω–µ?\n'
            '–≠—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ ‚Äú–ø–æ–¥—Ö–æ–¥–∏—Ç–µ –≤—ã –¥—Ä—É–≥ –¥—Ä—É–≥—É –∏–ª–∏ –Ω–µ—Ç‚Äù.\n'
            '–≠—Ç–æ —Ä–∞–∑–±–æ—Ä, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –æ–±–∞ —É–≤–∏–¥–∏—Ç–µ —Å–µ–±—è –∏–Ω–∞—á–µ.\n\n'
            '–ü–∞—Ä–∞. –°–µ–º—å—è. –ö–æ–º–∞–Ω–¥–∞. –î—Ä—É–∑—å—è.\n'
            '–í—ã–±–∏—Ä–∞–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –∏ –Ω—ã—Ä—è–µ–º –≤–≥–ª—É–±—å.',
        ),
        reply_markup=one_button_keyboard(
            text='1599 ‚ÇΩ / 2500 –∞—Å—Ç—Ä–æ–±–∞–ª–ª–æ–≤',
            callback_data='buy_compatibility',
            back_button_data='vip_services',
        ),
    )


@router.callback_query(
    F.data.in_(('buy_compatibility', 'show_connection_depth')),
)
@flags.with_client
async def chose_payment_type(query: CallbackQuery, state: FSMContext):
    await state.set_state(VIPCompatabilityState.payment_type)
    await query.message.answer(
        '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã',
        reply_markup=get_payment_choices_kb(
            '2500 –±–∞–ª–ª–æ–≤',
            '1599 ‚ÇΩ',
        ),
    )


@router.callback_query(
    F.data.in_(('astropoints', 'money')),
    StateFilter(VIPCompatabilityState.payment_type),
)
@flags.with_client
async def buy_compatibility(
    query: CallbackQuery,
    state: FSMContext,
    client: Client,
):
    if query.data == 'astropoints':
        if client.astropoints < 2500:
            await query.message.edit_text(
                astropoints_not_enough,
                reply_markup=get_payment_choices_kb(None, '1599 ‚ÇΩ'),
            )
            return
        client.astropoints -= 2500
        await client.asave()
        await query.message.edit_text(
            '–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–≤—è–∑–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
            reply_markup=connection_types_kb,
        )
        await state.clear()
    else:
        await query.message.answer_invoice(
            'VIP-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
            'VIP-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
            'vip_compatability',
            settings.CURRENCY,
            [LabeledPrice(label=settings.CURRENCY, amount=1599 * 100)],
            settings.PROVIDER_TOKEN,
        )
        await state.set_state(VIPCompatabilityState.payment)


@router.message(
    F.successful_payment,
    StateFilter(VIPCompatabilityState.payment),
)
@router.callback_query(F.data == 'connection_types')
async def on_successful_vip_compatability_payment(
    msg: Message | CallbackQuery,
    state: FSMContext,
):
    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.edit_text
    )
    await answer_func(
        text='–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–≤—è–∑–∏',
        reply_markup=connection_types_kb,
    )
    await state.clear()


@router.callback_query(F.data.startswith('connection_type'))
async def connection_type_info(query: CallbackQuery, state: FSMContext):
    connection_type = query.data.split(':')[-1]
    await state.update_data(connection_type=connection_type)
    await query.message.edit_text(
        connection_types[connection_type],
        reply_markup=one_button_keyboard(
            text='–í—ã–±—Ä–∞—Ç—å',
            callback_data='choose_connection_type',
            back_button_data='connection_types',
        ),
    )


@router.callback_query(F.data == 'choose_connection_type')
async def choose_connection_type(query: CallbackQuery):
    await query.message.edit_reply_markup(
        reply_markup=one_button_keyboard(
            text='–î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞',
            callback_data='add_person',
        ),
    )


@router.callback_query(F.data == 'add_person')
async def add_person(query: CallbackQuery, state: FSMContext):
    await state.set_state(VIPCompatabilityState.fullname)
    await query.message.answer('‚úç –í–≤–µ–¥–∏ –§–ò–û —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é')


@router.message(F.text, StateFilter(VIPCompatabilityState.fullname))
async def set_fullname(msg: Message, state: FSMContext):
    await state.update_data(fullname=msg.text)
    await msg.answer('üìÜ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.')
    await state.set_state(VIPCompatabilityState.birth_date)


@router.message(F.text, StateFilter(VIPCompatabilityState.birth_date))
async def set_birth_date(msg: Message, state: FSMContext):
    try:
        datetime.strptime(msg.text, '%d.%m.%Y')
    except ValueError:
        await msg.answer(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
        )
        return

    await state.update_data(birth_date=msg.text)
    await msg.answer(
        '‚è≥ –í–≤–µ–¥–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞. '
        '–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–æ—Ä–∞.\n'
        '–ù–µ –∑–Ω–∞–µ—à—å? –í—ã–±–µ—Ä–∏:',
        reply_markup=birth_times_kb,
    )
    await state.set_state(VIPCompatabilityState.birth_time)


@router.message(F.text, StateFilter(VIPCompatabilityState.birth_time))
@router.callback_query(
    F.data.startswith('birth_time'),
    StateFilter(VIPCompatabilityState.birth_time),
)
async def set_birth_time(msg: Message | CallbackQuery, state: FSMContext):
    if isinstance(msg, Message):
        birth_time = msg.text
        answer_func = msg.answer
    else:
        birth_time = msg.data.split('_')[-1]
        answer_func = msg.message.answer

    await state.update_data(birth_time=birth_time)
    await answer_func(
        '–û—Ç–ø—Ä–∞–≤—å –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞.\nüìç –¢–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥ ‚Äî –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã',
    )
    await state.set_state(VIPCompatabilityState.birth_location)


@router.message(F.text, StateFilter(VIPCompatabilityState.birth_location))
async def set_birth_location(msg: Message, state: FSMContext):
    data = await state.get_data()
    birth = f'{data["birth_date"]} {data["birth_time"]}'
    birth = datetime.strptime(birth, settings.DATE_FMT).astimezone(
        settings.TZ,
    )
    async with HumanDesignAPI() as api:
        bodygraphs = await api.bodygraphs(
            HDInputData.from_datetime(birth, msg.text),
        )
    persons = data.get('persons', [])
    person = asdict(bodygraphs)
    person.update({'fullname': data['fullname']})
    persons.append(person)
    await state.update_data(persons=persons)
    await msg.answer(
        f'{data["fullname"]} –¥–æ–±–∞–≤–ª–µ–Ω',
        reply_markup=get_vip_compatability_report_kb(
            (data['connection_type'] == 'family' and len(persons) < 3)
            or (data['connection_type'] == 'team' and len(persons) < 2),
        ),
    )
    await state.set_state(VIPCompatabilityState.report)


@router.callback_query(
    F.data == 'vip_compatability_report',
    StateFilter(VIPCompatabilityState.report),
)
@flags.with_client
async def vip_compatability_report(
    query: CallbackQuery,
    state: FSMContext,
    client: Client,
):
    data = await state.get_data()
    if data['connection_type'] == 'family' and len(data['persons']) < 2:
        await query.message.answer(
            '–î–ª—è —Å–µ–º—å–∏ –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º —Ç—Ä—ë—Ö —á–µ–ª–æ–≤–µ–∫',
        )
        return

    await query.message.edit_text(
        '–°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –∏ –∞—É–¥–∏–æ...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...',
    )
    await state.set_state(None)

    person = asdict(Bodygraphs.from_client(client))
    person.update({'fullname': client.fullname})
    data['persons'].append(person)
    compatability = await SoulMuse().answer(
        get_vip_compatability_prompt(
            data['connection_type'],
            data['persons'],
        ),
    )

    await query.message.answer_document(
        BufferedInputFile(
            generate_pdf(compatability),
            'VIP-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.pdf',
        ),
    )
    await query.message.answer_audio(
        BufferedInputFile(
            await synthesize(compatability),
            'VIP-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.wav',
        ),
    )
