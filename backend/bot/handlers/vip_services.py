from dataclasses import asdict
from datetime import datetime
from io import BytesIO

from aiogram import F, Router, flags
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    LabeledPrice,
    Message,
    PreCheckoutQuery, BufferedInputFile,
)
from fpdf import FPDF

from bot.api.humandesign import HumanDesignAPI
from bot.api.soul_muse import SoulMuse
from bot.keyboards.inline import (
    birth_times_kb,
    connection_types_kb,
    get_vip_compatability_report_kb,
    vip_compatibility_payment_choices_kb,
    vip_services_kb,
)
from bot.keyboards.utils import one_button_keyboard
from bot.schemas import Bodygraphs, HDInputData
from bot.settings import settings
from bot.states import VIPCompatabilityState
from bot.templates.base import connection_types
from bot.templates.vip_services import get_vip_compatability_prompt
from core.models import Client

router = Router()


@router.message(F.text == 'VIP-–£—Å–ª—É–≥–∏')
@router.callback_query(F.data == 'vip_services')
async def vip_services_handler(msg: Message | CallbackQuery):
    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.edit_text
    )
    await answer_func(
        'üíé VIP-–£—Å–ª—É–≥–∏ –æ—Ç Soul Muse\n\n'
        '–£ –∫–∞–∂–¥–æ–≥–æ ‚Äî —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.\n'
        '–ò–Ω–æ–≥–¥–∞ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.\n'
        '–†–∞–∑–±–æ—Ä —Ç–æ–ª—å–∫–æ –æ —Ç–µ–±–µ. –ì–æ–ª–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è.\n'
        '–ì–ª—É–±–∂–µ. –ë–ª–∏–∂–µ.\n'
        '–í—ã–±–∏—Ä–∞–π, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è.',
        reply_markup=vip_services_kb,
    )


@router.callback_query(F.data == 'vip_mini_consult')
async def vip_mini_consult(callback: CallbackQuery):
    await callback.message.edit_text(
        'üéß –ú–∏–Ω–∏-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º\n\n'
        '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç –∂–∏–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞.\n'
        '–ê—Å—Ç—Ä–æ–ª–æ–≥. –ù—É–º–µ—Ä–æ–ª–æ–≥. –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –•—å—é–º–∞–Ω-–¥–∏–∑–∞–π–Ω—É. '
        '–ü—Å–∏—Ö–æ–ª–æ–≥. –î—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫-—ç–Ω–µ—Ä–≥–æ–ø—Ä–∞–∫—Ç–∏–∫.\n\n'
        '3‚Äì5 –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ —É–º–µ–µ—Ç —á–∏—Ç–∞—Ç—å –≥–ª—É–±–∂–µ.',
        reply_markup=one_button_keyboard(
            text='‚ú® –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç—É ‚Äì 999 ‚ÇΩ / 1500 –±–∞–ª–ª–æ–≤',
            callback_data='buy_mini_consult',
            back_button_data='vip_services',
        ),
    )


@router.callback_query(F.data == 'vip_personal_report')
async def vip_personal_report(callback: CallbackQuery):
    await callback.message.edit_text(
        'üìÑ –ì–ª—É–±–æ–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç\n\n'
        '–¢—ã —Ö–æ—á–µ—à—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚Äî —Ç—ã —Ö–æ—á–µ—à—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã.\n'
        '–≠—Ç–æ—Ç –æ—Ç—á—ë—Ç ‚Äî –∫–∞–∫ –∫–∞—Ä—Ç–∞ —Å –º–µ—Ç–∫–∞–º–∏: –≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å, –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è,\n'
        '–∏ —á—Ç–æ –≤–∞–∂–Ω–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.\n\n'
        'PDF + –≥–æ–ª–æ—Å Soul Muse.\n'
        '–ë–µ–∑ –≥–∞–¥–∞–Ω–∏–π. –° —Ç–æ—á–∫–æ–π —Ñ–æ–∫—É—Å–∞.',
        reply_markup=one_button_keyboard(
            text='üåÄ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç ‚Äì 1299 ‚ÇΩ / 2000 –±–∞–ª–ª–æ–≤',
            callback_data='buy_personal_report',
            back_button_data='vip_services',
        ),
    )


@router.callback_query(F.data == 'vip_compatibility')
async def vip_compatibility(callback: CallbackQuery):
    await callback.message.edit_text(
        '‚ù§Ô∏è‚Äçüî• VIP-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n'
        '–¢—ã –≥–æ—Ç–æ–≤(–∞) –∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –≥–ª—É–±–∏–Ω–µ?\n'
        '–≠—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ ‚Äú–ø–æ–¥—Ö–æ–¥–∏—Ç–µ –≤—ã –¥—Ä—É–≥ –¥—Ä—É–≥—É –∏–ª–∏ –Ω–µ—Ç‚Äù.\n'
        '–≠—Ç–æ —Ä–∞–∑–±–æ—Ä, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –æ–±–∞ —É–≤–∏–¥–∏—Ç–µ —Å–µ–±—è –∏–Ω–∞—á–µ.\n\n'
        '–ü–∞—Ä–∞. –°–µ–º—å—è. –ö–æ–º–∞–Ω–¥–∞. –î—Ä—É–∑—å—è.\n'
        '–í—ã–±–∏—Ä–∞–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –∏ –Ω—ã—Ä—è–µ–º –≤–≥–ª—É–±—å.',
        reply_markup=one_button_keyboard(
            text='üíé –£–∑–Ω–∞—Ç—å –≥–ª—É–±–∏–Ω—É —Å–≤—è–∑–∏ ‚Äì 1599 ‚ÇΩ / 2500 –±–∞–ª–ª–æ–≤',
            callback_data='buy_compatibility',
            back_button_data='vip_services',
        ),
    )


@router.callback_query(
    F.data.in_(('buy_compatibility', 'show_connection_depth')),
)
@flags.with_client
async def chose_payment_type(query: CallbackQuery, state: FSMContext):
    await state.set_state(VIPCompatabilityState.payment_type)
    await query.message.answer(
        '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã', reply_markup=vip_compatibility_payment_choices_kb,
    )


@router.callback_query(
    F.data.in_(('astropoints', 'money')),
    StateFilter(VIPCompatabilityState.payment_type),
)
@flags.with_client
async def buy_compatibility(
    query: CallbackQuery, state: FSMContext, client: Client,
):
    if query.data == 'astropoints':
        if client.astropoints < 2500:
            await query.message.answer('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Å—Ç—Ä–æ–±–∞–ª–ª–æ–≤')
            return
        client.astropoints -= 2500
        await client.asave()
        await query.message.edit_text(
            '–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–≤—è–∑–∏', reply_markup=connection_types_kb,
        )
        await state.clear()
    else:
        await query.message.answer_invoice(
            'VIP-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
            'VIP-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
            'vip_compatability',
            settings.CURRENCY,
            [LabeledPrice(label=settings.CURRENCY, amount=1599 * 100)],
            settings.PROVIDER_TOKEN,
        )
        await state.set_state(VIPCompatabilityState.payment)


@router.pre_checkout_query(StateFilter(VIPCompatabilityState.payment))
async def accept_pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(True)


@router.message(
    F.successful_payment, StateFilter(VIPCompatabilityState.payment),
)
@router.callback_query(F.data == 'connection_types')
async def on_successful_payment(
    msg: Message | CallbackQuery, state: FSMContext,
):
    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.edit_text
    )
    await answer_func('–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–≤—è–∑–∏', reply_markup=connection_types_kb)
    await state.clear()


@router.callback_query(F.data.startswith('connection_type'))
async def connection_type_info(query: CallbackQuery, state: FSMContext):
    connection_type = query.data.split(':')[-1]
    await state.update_data(connection_type=connection_type)
    await query.message.edit_text(
        connection_types[connection_type],
        reply_markup=one_button_keyboard(
            text='–í—ã–±—Ä–∞—Ç—å',
            callback_data='choose_connection_type',
            back_button_data='connection_types',
        ),
    )


@router.callback_query(F.data == 'choose_connection_type')
async def choose_connection_type(query: CallbackQuery):
    await query.message.edit_reply_markup(
        reply_markup=one_button_keyboard(
            text='–î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞',
            callback_data='add_person',
        ),
    )


@router.callback_query(F.data == 'add_person')
async def add_person(query: CallbackQuery, state: FSMContext):
    await state.set_state(VIPCompatabilityState.fullname)
    await query.message.answer('‚úç –í–≤–µ–¥–∏ –§–ò–û —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é')


@router.message(F.text, StateFilter(VIPCompatabilityState.fullname))
async def set_fullname(msg: Message, state: FSMContext):
    await state.update_data(fullname=msg.text)
    await msg.answer('üìÜ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.')
    await state.set_state(VIPCompatabilityState.birth_date)


@router.message(F.text, StateFilter(VIPCompatabilityState.birth_date))
async def set_birth_date(msg: Message, state: FSMContext):
    try:
        datetime.strptime(msg.text, '%d.%m.%Y')
    except ValueError:
        await msg.answer(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
        )
        return

    await state.update_data(birth_date=msg.text)
    await msg.answer(
        '‚è≥ –í–≤–µ–¥–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞. '
        '–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–æ—Ä–∞.\n'
        '–ù–µ –∑–Ω–∞–µ—à—å? –í—ã–±–µ—Ä–∏:',
        reply_markup=birth_times_kb,
    )
    await state.set_state(VIPCompatabilityState.birth_time)


@router.message(F.text, StateFilter(VIPCompatabilityState.birth_time))
@router.callback_query(
    F.data.startswith('birth_time'),
    StateFilter(VIPCompatabilityState.birth_time),
)
async def set_birth_time(msg: Message | CallbackQuery, state: FSMContext):
    if isinstance(msg, Message):
        birth_time = msg.text
        answer_func = msg.answer
    else:
        birth_time = msg.data.split('_')[-1]
        answer_func = msg.message.answer

    await state.update_data(birth_time=birth_time)
    await answer_func(
        '–û—Ç–ø—Ä–∞–≤—å –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞.\n'
        'üìç –¢–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥ ‚Äî –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã',
    )
    await state.set_state(VIPCompatabilityState.birth_location)


@router.message(F.text, StateFilter(VIPCompatabilityState.birth_location))
async def set_birth_location(msg: Message, state: FSMContext):
    data = await state.get_data()
    birth = f'{data["birth_date"]} {data["birth_time"]}'
    birth = datetime.strptime(birth, settings.DATE_FMT).astimezone(
        settings.TZ,
    )
    async with HumanDesignAPI() as api:
        bodygraphs = await api.bodygraphs(
            HDInputData.from_datetime(birth, msg.text),
        )
    persons = data.get('persons', [])
    person = asdict(bodygraphs)
    person.update({'fullname': data['fullname']})
    persons.append(person)
    await state.update_data(persons=persons)
    await msg.answer(
        f'{data["fullname"]} –¥–æ–±–∞–≤–ª–µ–Ω',
        reply_markup=get_vip_compatability_report_kb(
            (data['connection_type'] == 'family' and len(persons) < 3)
            or (data['connection_type'] == 'team' and len(persons) < 2),
        ),
    )
    await state.set_state(VIPCompatabilityState.report)


@router.callback_query(F.data == 'vip_compatability_report', StateFilter(VIPCompatabilityState.report))
@flags.with_client
async def vip_compatability_report(
    query: CallbackQuery, state: FSMContext, client: Client,
):
    data = await state.get_data()
    person = asdict(Bodygraphs.from_client(client))
    person.update({'fullname': client.fullname})
    data['persons'].append(person)
    compatability = await SoulMuse().get_vip_compatability(
        data['connection_type'],
        data['persons'],
    )
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font('Arial', '', 'assets/arial.ttf', uni=True)
    pdf.set_font("Arial", size=14)
    pdf.multi_cell(0, 10, text=compatability)
    pdf_bytes = BytesIO()
    pdf.output(pdf_bytes)
    pdf_bytes.seek(0)
    await query.message.answer_document(
        BufferedInputFile(
            pdf_bytes.getvalue(),
            'vip_compatability.pdf'
        )
    )
    await state.clear()
