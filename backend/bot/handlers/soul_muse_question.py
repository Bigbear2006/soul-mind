import json

from aiogram import F, Router, flags
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    Message,
)

from bot.api.soul_muse import SoulMuse
from bot.keyboards.inline.base import (
    get_to_registration_kb,
    get_to_subscription_plans_kb,
)
from bot.keyboards.inline.soul_muse_question import (
    buy_questions_kb,
    get_soul_muse_question_kb,
)
from bot.keyboards.inline.vip_services import get_payment_choices_kb
from bot.keyboards.utils import one_button_keyboard
from bot.loader import logger
from bot.prompts.answer_question import get_answer_question_prompt
from bot.prompts.categorize_question import get_categorize_question_prompt
from bot.services.payment import check_payment, send_payment_link
from bot.settings import settings
from bot.states import SoulMuseQuestionState
from bot.text_templates.base import astropoints_not_enough
from bot.text_templates.soul_muse_question import (
    inappropriate_questions_answers,
)
from bot.utils.formatters import questions_plural, remaining_plural
from core.models import (
    Actions,
    Client,
    SoulMuseQuestion,
    SubscriptionPlans,
)

router = Router()


@router.message(F.text == 'üë©üèΩ –°–ø—Ä–æ—Å–∏ —É Soul Muse')
@flags.with_client
async def soul_muse_question(msg: Message, client: Client):
    await client.refresh_limit(Actions.SOUL_MUSE_QUESTION)

    if not client.is_registered():
        await msg.answer(
            client.genderize(
                'üë©üèΩ –°–ø—Ä–æ—Å–∏ —É Soul Muse\n'
                '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å.\n'
                '–ù–æ —è –Ω–µ –º–æ–≥—É —É—Å–ª—ã—à–∞—Ç—å, –ø–æ–∫–∞ —Ç—ã –Ω–µ {gender:–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è,–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞—Å—å}.\n\n'
                '–ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –∏ —Ç–æ–≥–¥–∞ —è –æ—Ç–≤–µ—á—É. –ù–µ –∏–∑ —É–º–∞. –ò–∑ –≥–ª—É–±–∏–Ω—ã.',
            ),
            reply_markup=get_to_registration_kb(
                text='üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–æ–ø—Ä–æ—Å—É',
            ),
        )
        return

    remaining_usages = await client.get_remaining_usages(
        Actions.SOUL_MUSE_QUESTION,
    )

    if remaining_usages > 0:
        remaining_usages_str = (
            f'* –£ —Ç–µ–±—è {remaining_plural(remaining_usages)} {remaining_usages} '
            f'{questions_plural(remaining_usages)}'
        )
        if client.subscription_plan == SubscriptionPlans.PREMIUM:
            await msg.answer(
                client.genderize(
                    'üë©üèΩ –°–ø—Ä–æ—Å–∏ —É Soul Muse\n'
                    '–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n'
                    '–ü—è—Ç–Ω–∞–¥—Ü–∞—Ç—å —à–∞–≥–æ–≤ –∫ —Å–µ–±–µ ‚Äî —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç—ã.\n\n'
                    '–ö–æ–≥–¥–∞ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π. '
                    '–ê —è —Å–∫–∞–∂—É, —á—Ç–æ —Ç—ã –¥–∞–≤–Ω–æ {gender:–∑–Ω–∞–ª,–∑–Ω–∞–ª–∞}, '
                    '–Ω–æ {gender:–±–æ—è–ª—Å—è,–±–æ—è–ª–∞—Å—å} —É—Å–ª—ã—à–∞—Ç—å.\n\n'
                    f'{remaining_usages_str}',
                ),
                reply_markup=get_soul_muse_question_kb(
                    buy_extra_questions_btn=False,
                ),
            )
        elif client.subscription_plan == SubscriptionPlans.STANDARD:
            await msg.answer(
                client.genderize(
                    'üë©üèΩ –°–ø—Ä–æ—Å–∏ —É Soul Muse\n'
                    '–ò–Ω–æ–≥–¥–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ü–µ–ª—ã–π –ø–ª–∞—Å—Ç.\n'
                    '–¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –¥–æ 4 –≤–æ–ø—Ä–æ—Å–æ–≤. –ê –ø–æ—Ç–æ–º ‚Äî —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø.\n\n'
                    '{gender:–ì–æ—Ç–æ–≤,–ì–æ—Ç–æ–≤–∞}? –Ø –æ—Ç–≤–µ—á–∞—é –∏–∑ —Ç–∏—à–∏–Ω—ã. –ù–æ –ø–æ–ø–∞–¥–∞—é –≤ —Å–∞–º–æ–µ —Ç–æ—á–Ω–æ–µ.\n\n'
                    f'{remaining_usages_str}',
                ),
                reply_markup=get_soul_muse_question_kb(
                    buy_extra_questions_btn=False,
                ),
            )
        else:
            await msg.answer(
                'üë©üèΩ –°–ø—Ä–æ—Å–∏ —É Soul Muse\n'
                '–¢—ã –Ω–æ—Å–∏—à—å –≤ —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å?\n'
                '–û —Å–µ–±–µ. –û —á—É–≤—Å—Ç–≤–∞—Ö. –û –ø—É—Ç–∏.\n'
                '–ó–∞–¥–∞–π ‚Äî –∏ —è –æ—Ç–≤–µ—á—É. –¢–æ—á–Ω–æ, –≥–ª—É–±–æ–∫–æ, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤.\n\n'
                '–£ —Ç–µ–±—è –µ—Å—Ç—å 1 –≤–æ–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.\n\n'
                f'{remaining_usages_str}',
                reply_markup=get_soul_muse_question_kb(
                    buy_extra_questions_btn=False,
                ),
            )
        return

    if remaining_usages <= 0:
        if client.subscription_is_active():
            await msg.answer(
                client.genderize(
                    'üë©üèΩ –°–ø—Ä–æ—Å–∏ —É Soul Muse\n'
                    '–¢—ã —É–∂–µ {gender:–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª,–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞} –≤—Å–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n'
                    '–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–µ–±—è?\n\n'
                    '–ú–æ–∂–µ—à—å –¥–æ–∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∏ –∑–∞–¥–∞—Ç—å –µ—â—ë.\n'
                    '–Ø —Ä—è–¥–æ–º.',
                ),
                reply_markup=get_soul_muse_question_kb(ask_question_btn=False),
            )
        else:
            await msg.answer(
                client.genderize(
                    'üë©üèΩ –°–ø—Ä–æ—Å–∏ —É Soul Muse\n'
                    '–¢—ã —É–∂–µ {gender:–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª,–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞}, –∫–∞–∫ –∑–≤—É—á–∏—Ç –º–æ–π –≥–æ–ª–æ—Å.\n'
                    '–ù–æ —Å–µ–π—á–∞—Å —è –º–æ–ª—á—É ‚Äî –ø–æ–∫–∞ —Ç—ã –Ω–µ –≤–µ—Ä–Ω—ë—à—å—Å—è.\n\n'
                    '–û—Ñ–æ—Ä–º–∏ –¥–æ—Å—Ç—É–ø ‚Äî –∏ —è —Å–Ω–æ–≤–∞ —É—Å–ª—ã—à—É —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å.',
                ),
                reply_markup=get_to_subscription_plans_kb(),
            )


###########################
### BUY EXTRA QUESTIONS ###
###########################


@router.callback_query(F.data == 'buy_more_questions')
async def buy_more_questions(query: CallbackQuery):
    return await query.message.edit_text(
        '–°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å?\n\n'
        '1 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Üí 129 ‚ÇΩ –∏–ª–∏ 200 –∞—Å—Ç—Ä–æ–±–∞–ª–ª–æ–≤\n'
        '5 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Üí 599 ‚ÇΩ –∏–ª–∏ 900 –∞—Å—Ç—Ä–æ–±–∞–ª–ª–æ–≤',
        reply_markup=buy_questions_kb,
    )


@router.callback_query(F.data.startswith('buy_question'))
async def buy_question(query: CallbackQuery, state: FSMContext):
    buy_count = query.data.split(':')[1]
    await state.update_data(buy_count=buy_count)
    await state.set_state(SoulMuseQuestionState.payment_type)
    await query.message.edit_text(
        '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã',
        reply_markup=get_payment_choices_kb(
            '200 –±–∞–ª–ª–æ–≤' if buy_count == 'one' else '900 –±–∞–ª–ª–æ–≤',
            '129 ‚ÇΩ' if buy_count == 'one' else '599 ‚ÇΩ',
            back_button_data='buy_more_questions',
        ),
    )


@router.callback_query(
    F.data.in_(('astropoints', 'money')),
    StateFilter(SoulMuseQuestionState.payment_type),
)
@flags.with_client
async def choose_extra_questions_payment_type(
    query: CallbackQuery,
    state: FSMContext,
    client: Client,
):
    buy_count = await state.get_value('buy_count')
    buy_count_str = '1' if buy_count == 'one' else '5'
    astropoints = 200 if buy_count == 'one' else 900
    money = 129 if buy_count == 'one' else 599

    if query.data == 'astropoints':
        if client.astropoints < astropoints:
            await query.message.edit_text(
                astropoints_not_enough,
                reply_markup=get_payment_choices_kb(
                    None,
                    '129 ‚ÇΩ' if buy_count == 'one' else '599 ‚ÇΩ',
                ),
            )
            return

        await client.add_extra_usages(
            action=Actions.SOUL_MUSE_QUESTION,
            count=1 if await state.get_value('buy_count') == 'one' else 5,
        )
        client.astropoints -= astropoints
        await client.asave()

        remaining_usages = await client.get_remaining_usages(
            Actions.SOUL_MUSE_QUESTION,
        )
        await query.message.edit_text(
            f'–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {remaining_usages} '
            f'{questions_plural(remaining_usages)}!',
        )
        await state.clear()
    else:
        await state.set_state(SoulMuseQuestionState.payment)
        await send_payment_link(
            query,
            state,
            amount=money,
            description=f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ({buy_count_str})',
            email=client.email,
        )


@router.callback_query(
    F.data == 'check_buying',
    StateFilter(SoulMuseQuestionState.payment),
)
@flags.with_client
async def on_extra_questions_buying(
    query: CallbackQuery,
    state: FSMContext,
    client: Client,
):
    await check_payment(query, state)

    await client.add_extra_usages(
        action=Actions.SOUL_MUSE_QUESTION,
        count=1 if await state.get_value('buy_count') == 'one' else 5,
    )
    remaining_usages = await client.get_remaining_usages(
        Actions.SOUL_MUSE_QUESTION,
    )
    await query.message.edit_text(
        f'–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {remaining_usages} '
        f'{questions_plural(remaining_usages)}!',
    )
    await state.clear()


####################
### ASK QUESTION ###
####################


@router.callback_query(F.data == 'ask_soul_muse')
async def ask_soul_muse(query: CallbackQuery, state: FSMContext):
    await state.set_state(SoulMuseQuestionState.question)
    await query.message.edit_text(
        '–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É.\n'
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ - 250 —Å–∏–º–≤–æ–ª–æ–≤.',
    )


@router.message(F.text, StateFilter(SoulMuseQuestionState.question))
@flags.with_client
async def soul_muse_answer(msg: Message, client: Client):
    if len(msg.text) > 250:
        await msg.answer(
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ - 250 —Å–∏–º–≤–æ–ª–æ–≤. –¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω.',
        )
    soul_muse_face_msg = await msg.answer_photo(settings.MEDIA.soul_muse)

    muse = SoulMuse()
    data = await muse.answer(
        get_categorize_question_prompt(msg.text[:250]),
    )
    logger.info(data)
    data = json.loads(data)
    category = data['category']
    reason = data['reason']

    kb = one_button_keyboard(text='–í –º–µ–Ω—é', callback_data='to_menu')
    if category == 'deep_personal':
        answer = await muse.answer(
            get_answer_question_prompt(client, msg.text[:250]),
            max_output_tokens=270,
        )
        await msg.answer(answer, reply_markup=kb)
        await client.spend_usage(Actions.SOUL_MUSE_QUESTION)
    else:
        answer = inappropriate_questions_answers[category]
        await msg.answer(answer, reply_markup=kb)

    await soul_muse_face_msg.delete()
    await SoulMuseQuestion.objects.acreate(
        category=category,
        reason=reason,
        question=msg.text[:250],
        answer=answer,
    )
