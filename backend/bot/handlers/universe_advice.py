from datetime import date

from aiogram import F, Router, flags
from aiogram.types import CallbackQuery, Message

from bot.keyboards.inline import get_to_registration_kb
from bot.keyboards.utils import one_button_keyboard
from bot.templates.universe_advice import universe_advices
from core.models import Client

router = Router()


@router.message(F.text == 'üåü –°–æ–≤–µ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π')
@flags.with_client
async def universe_advice_intro(msg: Message, client: Client):
    if not client.is_registered():
        await msg.answer(
            'üåü –°–æ–≤–µ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π\n\n'
            '–í—Å–µ–ª–µ–Ω–Ω–∞—è —É–∂–µ –≥–æ—Ç–æ–≤–∞ —Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ –≤–∞–∂–Ω–æ–µ.\n'
            '–ù–æ —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å ‚Äî —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è.\n\n'
            '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è ‚Äî –∏ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Ç–µ–±—è –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ.',
            reply_markup=get_to_registration_kb(),
        )
    else:
        await msg.answer(
            'üåü –°–æ–≤–µ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π\n\n'
            '–í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ–≤–æ—Ä–∏—Ç —Å —Ç–µ–º–∏, –∫—Ç–æ —É–º–µ–µ—Ç —Å–ª—É—à–∞—Ç—å.\n'
            '–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ ‚Äî –æ–¥–Ω–æ –ø–æ—Å–ª–∞–Ω–∏–µ.\n'
            '–ö–æ—Ä–æ—Ç–∫–æ–µ. –¢–æ—á–Ω–æ–µ. –í –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n'
            '–•–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å, –Ω–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?',
            reply_markup=one_button_keyboard(
                text='üåÄ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç',
                callback_data='universe_advice',
            ),
        )


@router.callback_query(F.data == 'universe_advice')
async def universe_advice(query: CallbackQuery):
    await query.message.edit_text(
        universe_advices.get(
            date.today().strftime('%d.%m.%Y'),  # for test: '10.05.2025',
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Å–æ–≤–µ—Ç–∞ –Ω–µ—Ç.',
        ),
    )
