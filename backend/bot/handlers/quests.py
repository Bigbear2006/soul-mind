import random

from aiogram import F, Router, flags
from aiogram.types import CallbackQuery, Message
from django.db import IntegrityError, models

from bot.keyboards.inline.base import (
    get_to_registration_kb,
    get_to_subscription_plans_kb,
)
from bot.keyboards.inline.quests import (
    get_weekly_quest_kb,
)
from bot.keyboards.utils import keyboard_from_queryset, one_button_keyboard
from bot.settings import settings
from bot.templates.quests import daily_praises, weekly_praises
from core.models import (
    Client,
    ClientDailyQuest,
    ClientWeeklyQuest,
    ClientWeeklyQuestTask,
    QuestStatuses,
    WeeklyQuest,
    WeeklyQuestTask,
)

router = Router()


@router.message(F.text == 'üß© –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞')
@router.callback_query(F.data == 'to_weekly_quests_list')
@flags.with_client
async def weekly_quests_list(msg: Message | CallbackQuery, client: Client):
    if not client.is_registered():
        await msg.answer(
            'üß© –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞\n\n'
            '–•–æ—á–µ—à—å —Ä–∞—Å—Ç–∏ ‚Äî –Ω–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.\n'
            '–ù–æ —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è ‚Äî –Ω–∞–¥–æ –ø–æ—è–≤–∏—Ç—å—Å—è.\n\n'
            '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, –∏ —è –æ—Ç–∫—Ä–æ—é —Ç–µ–±–µ –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂.',
            reply_markup=get_to_registration_kb(),
        )
        return

    if client.has_trial():
        await msg.answer(
            'üß© –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞\n\n'
            '–Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è —Ç–µ–±—è –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å –≤–Ω—É—Ç—Ä—å.\n'
            '3 –¥–Ω—è ‚Äî —á—Ç–æ–±—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ.\n'
            '–ë–µ–∑ –Ω–∞–ø—Ä—è–≥–∞. –ù–æ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º.\n\n'
            '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å ‚Äî –Ω–∞—á–Ω–∏ —Å–µ–π—á–∞—Å. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.',
            reply_markup=one_button_keyboard(
                text='‚ñ∂ –ù–∞—á–∞—Ç—å 3-–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂',
                callback_data='start_trial_challenge',
            ),
        )
        return

    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.edit_text
    )
    await answer_func(
        '–í—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å',
        reply_markup=await keyboard_from_queryset(
            WeeklyQuest,
            'weekly_quest',
        ),
    )


@router.callback_query(F.data.startswith('weekly_quest'))
async def weekly_quest_detail(query: CallbackQuery):
    quest = await WeeklyQuest.objects.aget(pk=query.data.split(':')[1])
    await query.message.edit_text(
        quest.title,
        reply_markup=await get_weekly_quest_kb(quest),
    )


@router.callback_query(
    F.data.startswith('participate_in_weekly_quest') | F.data
    == 'start_trial_challenge',
)
@flags.with_client
async def participate_in_weekly_quest(query: CallbackQuery, client: Client):
    pk = (
        query.data.split(':')[1]
        if query.data.startswith('participate_in_weekly_quest')
        else settings.TRIAL_WEEKLY_QUEST_ID
    )
    try:
        quest = await WeeklyQuest.objects.aget(pk=pk)
        await ClientWeeklyQuest.objects.acreate(client=client, quest=quest)
        await query.message.edit_text(
            f'–¢–µ–ø–µ—Ä—å —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ {quest.title}!\n'
            f'–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.',
        )
    except IntegrityError:
        await query.message.edit_text('–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ.')


@router.callback_query(F.data.startswith('quest'))
async def quest_handler(query: CallbackQuery):
    _, quest_type, quest_id, status = query.data.split(':')
    astropoints = 5 if quest_type == 'daily' else 10
    QuestModel = (
        ClientDailyQuest if quest_type == 'daily' else ClientWeeklyQuestTask
    )

    try:
        await QuestModel.objects.acreate(
            client_id=query.message.chat.id,
            quest_id=quest_id,
            status=status,
        )
    except IntegrityError:
        await query.answer('–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ')
        return

    if status == QuestStatuses.COMPLETED:
        await query.message.edit_text(
            random.choice(daily_praises),
            reply_markup=None,
        )
    else:
        await query.message.edit_text(
            '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ',
            reply_markup=None,
        )

    if status == QuestStatuses.COMPLETED and quest_type == 'weekly':
        weekly_quest_task = await WeeklyQuestTask.objects.select_related(
            'quest',
        ).aget(quest_id=quest_id)
        if weekly_quest_task.day == 7:
            astropoints += 10
            await query.message.edit_text(random.choice(weekly_praises))

        if weekly_quest_task.pk == settings.TRIAL_WEEKLY_QUEST_ID:
            astropoints += 10
            await query.message.edit_text(
                '‚Äú–¢—ã —Å–¥–µ–ª–∞–ª(–∞) —Ç—Ä–∏ —à–∞–≥–∞ –≤–Ω—É—Ç—Ä—å. –≠—Ç–æ –Ω–µ –≤—Å—ë. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ.‚Äù\n\n'
                '–¢—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞), –∫–∞–∫–æ–≤–æ —ç—Ç–æ ‚Äî –±—ã—Ç—å —Å —Å–æ–±–æ–π.\n'
                '–ù–µ —Å–Ω–∞—Ä—É–∂–∏. –ê –≤–Ω—É—Ç—Ä–∏.\n'
                '–ë–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è. –ë–µ–∑ —Ä–æ–ª–∏.\n'
                '–¢—ã –Ω–µ –Ω–∞—á–∞–ª(–∞) –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è ‚Äî —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è(–ª–∞—Å—å) –∫ —Å–µ–±–µ.\n'
                '–ê –¥–∞–ª—å—à–µ?..\n'
                '–î–∞–ª—å—à–µ ‚Äî –≥–ª—É–±–∂–µ. –¢–æ—á–Ω–µ–µ. –°–≤–æ–±–æ–¥–Ω–µ–µ.\n'
                'SoulMind –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –¥–µ—Å—è—Ç–∫–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤:\n'
                '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å, —ç–Ω–µ—Ä–≥–∏—è‚Ä¶\n'
                '–ß—Ç–æ –¥–∞–ª—å—à–µ?\n'
                '–í–Ω—É—Ç—Ä–∏ —Ç–µ–±—è –∂–¥—ë—Ç:\n'
                '‚Äî 300+ –ø—Ä–∞–∫—Ç–∏–∫ –ø–æ —Ç–≤–æ–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ç–æ—á–∫–∞–º —Ä–æ—Å—Ç–∞\n'
                '‚Äî 23 —Ç–µ–º—ã: –æ—Ç —Å–∞–º–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≥—Ä–∞–Ω–∏—Ü –¥–æ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n'
                '‚Äî –ß–µ–ª–ª–µ–Ω–¥–∂–∏, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥ —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å\n'
                '–≠—Ç–æ –Ω–µ ‚Äú–º–æ—Ç–∏–≤–∞—Ü–∏—è‚Äù. –≠—Ç–æ SoulMind.\n'
                '–¢—ã –≥–æ—Ç–æ–≤(–∞)? –¢–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏ –≥–ª—É–±–∂–µ.\n'
                '‚Äú–Ø –Ω–µ —Å–∫–∞–∂—É —Ç–µ–±–µ, –∫—Ç–æ —Ç—ã. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å.‚Äù ‚Äî Soul Muse',
                reply_markup=get_to_subscription_plans_kb(
                    text='–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                ),
            )

    if status == QuestStatuses.COMPLETED:
        await Client.objects.filter(pk=query.message.chat.id).aupdate(
            astropoints=models.F('astropoints') + astropoints,
        )


# @router.message(Command('daily_quest'))
# async def send_daily_quest_handler(msg: Message):
#     quests_ids = await sync_to_async(list)(
#         DailyQuest.objects.values_list('id', flat=True),
#     )
#     quest = await DailyQuest.objects.aget(pk=random.choice(quests_ids))
#     await msg.answer(
#         f'–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂\n\n{quest.text}',
#         reply_markup=get_quest_statuses_kb('daily', quest.pk),
#     )
#
#
# @router.message(Command('weekly_quest'))
# async def send_weekly_quest_handler(msg: Message):
#     quest = (
#         await WeeklyQuestTask.objects.filter(day=7)
#         .select_related('quest')
#         .afirst()
#     )
#     await msg.answer(
#         f'{quest.quest.title} (–¥–µ–Ω—å {quest.day})\n\n{quest.text}',
#         reply_markup=get_quest_statuses_kb('weekly', quest.pk),
#     )
