import random

from aiogram import F, Router, flags
from aiogram.types import CallbackQuery, Message
from django.db import IntegrityError, models

from bot.keyboards.inline.base import (
    get_to_registration_kb,
    get_to_subscription_plans_kb,
)
from bot.keyboards.inline.quests import (
    get_quest_statuses_kb,
    get_quests_kb,
    get_weekly_quest_kb,
    get_weekly_quests_kb,
)
from bot.keyboards.utils import one_button_keyboard
from bot.settings import settings
from bot.templates.quests import (
    daily_praises,
    get_daily_quest_text,
    trial_quest_praise,
    weekly_praises,
)
from core.choices import SubscriptionPlans
from core.models import (
    Client,
    ClientDailyQuest,
    ClientWeeklyQuest,
    ClientWeeklyQuestTask,
    QuestStatuses,
    WeeklyQuest,
    WeeklyQuestTask,
)

router = Router()


@router.message(F.text == 'üß© –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞')
@router.callback_query(F.data == 'to_weekly_quests_list')
@flags.with_client
async def weekly_quests_list(msg: Message | CallbackQuery, client: Client):
    if not client.is_registered():
        await msg.answer(
            'üß© –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞\n\n'
            '–•–æ—á–µ—à—å —Ä–∞—Å—Ç–∏ ‚Äî –Ω–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.\n'
            '–ù–æ —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è ‚Äî –Ω–∞–¥–æ –ø–æ—è–≤–∏—Ç—å—Å—è.\n\n'
            '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, –∏ —è –æ—Ç–∫—Ä–æ—é —Ç–µ–±–µ –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂.',
            reply_markup=get_to_registration_kb(),
        )
        return
    elif client.subscription_is_active():
        answer_func = (
            msg.answer if isinstance(msg, Message) else msg.message.edit_text
        )
        if client.subscription_plan == SubscriptionPlans.STANDARD:
            await answer_func(
                client.genderize(
                    'üß© –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞\n'
                    '–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ.\n'
                    '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ñ–æ–∫—É—Å–∞.\n'
                    '–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü ‚Äî –æ–¥–∏–Ω —á–µ–ª–ª–µ–Ω–¥–∂, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–±—è –ø–æ —á–∞—Å—Ç—è–º.\n'
                    '–ò –¥–∞, –∑–∞ —ç—Ç–æ —Ç—ã –µ—â—ë –ø–æ–ª—É—á–∞–µ—à—å –∞—Å—Ç—Ä–æ–±–∞–ª–ª—ã.\n\n'
                    '{gender:–ì–æ—Ç–æ–≤,–ì–æ—Ç–æ–≤–∞} –≤—ã—Ä–∞—Å—Ç–∏ –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ?',
                ),
                reply_markup=get_quests_kb(
                    '‚ö° –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é –¥–Ω—è',
                    '‚ñ∂ –û—Ç–∫—Ä—ã—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ –º–µ—Å—è—Ü–∞',
                ),
            )
        else:
            await answer_func(
                client.genderize(
                    'üß© –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞\n'
                    '–¢—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n'
                    '–•–æ—á–µ—à—å –∏–¥—Ç–∏ –º–µ–¥–ª–µ–Ω–Ω–æ ‚Äî –∏–¥–∏.\n'
                    '–•–æ—á–µ—à—å –≥–ª—É–±–∂–µ ‚Äî –≤—ã–±–∏—Ä–∞–π –ª—é–±–æ–π —á–µ–ª–ª–µ–Ω–¥–∂, —Ö–æ—Ç—å —Å–µ–π—á–∞—Å.\n'
                    '–ë–∞–ª–ª—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –∑–∞ –¥–≤–∞ –≤ –º–µ—Å—è—Ü ‚Äî –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥—É—à–∏.\n\n'
                    '{gender:–ì–æ—Ç–æ–≤,–ì–æ—Ç–æ–≤–∞} –∫ –Ω–æ–≤–æ–º—É –≤—ã–∑–æ–≤—É?',
                ),
                reply_markup=get_quests_kb(
                    '‚ö° –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ',
                    '‚ñ∂ –í—ã–±—Ä–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂',
                ),
            )
    elif client.has_trial():
        await msg.answer(
            'üß© –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞\n\n'
            '–Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è —Ç–µ–±—è –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å –≤–Ω—É—Ç—Ä—å.\n'
            '3 –¥–Ω—è ‚Äî —á—Ç–æ–±—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ.\n'
            '–ë–µ–∑ –Ω–∞–ø—Ä—è–≥–∞. –ù–æ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º.\n\n'
            '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å ‚Äî –Ω–∞—á–Ω–∏ —Å–µ–π—á–∞—Å. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.',
            reply_markup=one_button_keyboard(
                text='‚ñ∂ –ù–∞—á–∞—Ç—å 3-–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂',
                callback_data='start_trial_challenge',
            ),
        )
    else:
        await msg.answer(
            'üß© –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–æ–¥–ø–∏—Å–∫–µ.',
            reply_markup=get_to_subscription_plans_kb(),
        )


@router.callback_query(F.data == 'weekly_quests')
@flags.with_client
async def weekly_quests(query: CallbackQuery, client: Client):
    await query.message.edit_text(
        '–í—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å',
        reply_markup=await get_weekly_quests_kb(client),
    )


@router.callback_query(F.data == 'daily_quest')
@flags.with_client
async def daily_quest(query: CallbackQuery, client: Client):
    quest = await client.get_today_quest()
    if quest.status == QuestStatuses.COMPLETED:
        await query.message.edit_text(
            client.genderize(
                '–°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ {gender:–≤—ã–ø–æ–ª–Ω–∏–ª,–≤—ã–ø–æ–ª–Ω–∏–ª–∞} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n',
            ),
        )
        return

    await query.message.edit_text(
        get_daily_quest_text(client, quest.quest.text),
        reply_markup=get_quest_statuses_kb(client, 'daily', quest.quest_id),
    )


@router.callback_query(F.data.startswith('weekly_quest'))
@flags.with_client
async def weekly_quest_detail(query: CallbackQuery, client: Client):
    quest = await WeeklyQuest.objects.aget(pk=query.data.split(':')[1])
    await query.message.edit_text(
        client.genderize(f'{quest.title}\n\n{quest.description}'),
        reply_markup=await get_weekly_quest_kb(quest),
    )


@router.callback_query(
    F.data.startswith('participate_in_weekly_quest')
    | (F.data == 'start_trial_challenge'),
)
@flags.with_client
async def participate_in_weekly_quest(query: CallbackQuery, client: Client):
    pk = (
        query.data.split(':')[1]
        if query.data.startswith('participate_in_weekly_quest')
        else settings.TRIAL_WEEKLY_QUEST_ID
    )
    try:
        quest = await WeeklyQuest.objects.aget(pk=pk)
        task = await WeeklyQuestTask.objects.select_related('quest').aget(
            quest=quest,
            day=1,
        )
        await ClientWeeklyQuest.objects.acreate(client=client, quest=quest)
        await query.message.edit_text(
            f'–¢–µ–ø–µ—Ä—å —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ {quest.title}!\n'
            f'–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.',
        )
        await query.message.answer(
            client.genderize(task.to_message_text()),
            reply_markup=get_quest_statuses_kb(client, 'weekly', task.pk),
        )
    except IntegrityError:
        await query.message.edit_text(
            '–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ.\n'
            '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.',
        )


@router.callback_query(F.data.startswith('quest'))
@flags.with_client
async def quest_handler(query: CallbackQuery, client: Client):
    _, quest_type, quest_id, status = query.data.split(':')
    astropoints = 5 if quest_type == 'daily' else 10
    QuestModel = (
        ClientDailyQuest if quest_type == 'daily' else ClientWeeklyQuestTask
    )

    if quest_type == 'daily':
        await QuestModel.objects.filter(
            client_id=query.message.chat.id,
            quest_id=quest_id,
        ).aupdate(
            status=status,
        )
    else:
        try:
            await QuestModel.objects.acreate(
                client_id=query.message.chat.id,
                quest_id=quest_id,
                status=status,
            )
        except IntegrityError:
            await query.answer(
                client.genderize(
                    '–¢—ã —É–∂–µ {gender:–ø—Ä–æ—Ö–æ–¥–∏–ª,–ø—Ä–æ—Ö–æ–¥–∏–ª–∞} —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ',
                ),
            )
            return

    if status == QuestStatuses.COMPLETED:
        await query.message.edit_text(
            client.genderize(random.choice(daily_praises)),
            reply_markup=None,
        )
    else:
        await query.message.edit_text(
            '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ',
            reply_markup=None,
        )

    if status == QuestStatuses.COMPLETED and quest_type == 'weekly':
        weekly_quest_task = await WeeklyQuestTask.objects.select_related(
            'quest',
        ).aget(id=quest_id)
        if weekly_quest_task.day == 7:
            astropoints += 10
            await query.message.edit_text(random.choice(weekly_praises))

        if (
            weekly_quest_task.pk == settings.TRIAL_WEEKLY_QUEST_ID
            and weekly_quest_task.day == 3
        ):
            astropoints += 10
            await query.message.edit_text(
                client.genderize(trial_quest_praise),
                reply_markup=get_to_subscription_plans_kb(
                    text='–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                ),
            )

    if status == QuestStatuses.COMPLETED:
        await Client.objects.filter(pk=query.message.chat.id).aupdate(
            astropoints=models.F('astropoints') + astropoints,
        )
