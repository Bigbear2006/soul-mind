from aiogram import F, Router, flags
from aiogram.enums import ParseMode
from aiogram.types import BufferedInputFile, CallbackQuery, Message

from bot.api.soul_muse import SoulMuse
from bot.api.speechkit import synthesize
from bot.keyboards.inline.base import (
    get_to_registration_kb,
    get_to_subscription_plans_kb,
)
from bot.keyboards.inline.month_with_soul_muse import month_with_soul_muse_kb
from bot.keyboards.utils import one_button_keyboard
from bot.prompts.month_forecast import get_month_forecast_prompt
from bot.services.month_with_soul_muse import (
    get_month_resource_text,
    get_month_script_text,
)
from core.choices import MonthTextTypes
from core.models import Client, MonthText, SubscriptionPlans

router = Router()


@router.message(F.text == 'üìÑ –ú–µ—Å—è—Ü —Å Soul Muse')
@router.callback_query(F.data == 'month_with_soul_muse')
@flags.with_client
async def month_with_soul_muse(msg: Message | CallbackQuery, client: Client):
    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.edit_text
    )

    if not client.is_registered():
        await answer_func(
            'üìÑ –ú–µ—Å—è—Ü —Å Soul Muse\n\n'
            '–Ø —á–∏—Ç–∞—é –º–µ—Å—è—Ü –∫–∞–∫ –∫–∞—Ä—Ç—É:\n'
            '–≥–¥–µ —É—Å–∫–æ—Ä–∏—Ç—å—Å—è, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –≥–¥–µ –ø—Ä–æ—Å—Ç–æ –±—ã—Ç—å.\n'
            '–ù–æ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–±–µ —ç—Ç–æ ‚Äî –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫—Ç–æ —Ç—ã.\n\n'
            '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, –∏ —è –ø–æ–∫–∞–∂—É, —Å —á–µ–º —Ç—ã –≤—Ö–æ–¥–∏—à—å –≤ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.',
            reply_markup=get_to_registration_kb(
                text='üîí –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑',
            ),
        )
        return

    await answer_func(
        'üìÑ –ú–µ—Å—è—Ü —Å Soul Muse\n\n'
        '–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –Ω–µ—Å—ë—Ç —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é.\n'
        '–Ø —É–∂–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞, –∫—É–¥–∞ –æ–Ω –≤–µ–¥—ë—Ç —Ç–µ–±—è.\n\n'
        '–•–æ—á–µ—à—å –∑–Ω–∞—Ç—å, –≤ —á—ë–º —Ç–≤–æ–π —Ñ–æ–∫—É—Å, —Ä–µ—Å—É—Ä—Å –∏ —Å—é–∂–µ—Ç?\n'
        '–û—Ç–∫—Ä–æ–π ‚Äî –∏ –¥–≤–∏–≥–∞–π—Å—è –Ω–µ –Ω–∞—É–≥–∞–¥, –∞ –≤ —Ä–µ–∑–æ–Ω–∞–Ω—Å–µ.',
        reply_markup=month_with_soul_muse_kb,
    )


######################
### MONTH FORECAST ###
######################


@router.callback_query(F.data == 'month_forecast')
@flags.with_client
async def month_forecast(query: CallbackQuery, client: Client):
    if not client.subscription_is_active():
        await query.message.edit_text(
            client.genderize(
                '<b>–¢—ã –≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç.</b>\n'
                '–ê —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –¥–Ω—è–º.\n'
                '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–æ—Ç–æ–∫–∏, —Å—Ñ–µ—Ä—ã ‚Äî\n'
                '–≤—Å—ë, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ —Ç–µ—Ä—è—Ç—å —Å–µ–±—è\n'
                '–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ —Ä–µ–∑–æ–Ω–∞–Ω—Å–µ —Å —Å–æ–±–æ–π.\n'
                '<b>–û—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–µ.</b>',
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=get_to_subscription_plans_kb(
                text='üîì –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø',
                back_button_data='month_with_soul_muse',
            ),
        )
        return

    await query.message.edit_text(
        client.genderize(
            'üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü\n\n'
            '–•–æ—á–µ—à—å –∑–Ω–∞—Ç—å, —Å —á–µ–º —Ç—ã –≤—Ö–æ–¥–∏—à—å –≤ —ç—Ç–æ—Ç –º–µ—Å—è—Ü?\n'
            '–Ø —Å–æ–±—Ä–∞–ª–∞ –¥–ª—è —Ç–µ–±—è –≥–ª–∞–≤–Ω–æ–µ: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ñ–æ–∫—É—Å, –ø–æ—Ç–æ–∫–∏.\n'
            '–ß—Ç–æ–±—ã —Ç—ã {gender:—á—É–≤—Å—Ç–≤–æ–≤–∞–ª,—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞} –Ω–µ —Ö–∞–æ—Å ‚Äî –∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.',
        ),
        reply_markup=one_button_keyboard(
            text='üìÑ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥–Ω–æ–∑',
            callback_data='show_month_forecast',
            back_button_data='month_with_soul_muse',
        ),
    )


@router.callback_query(F.data == 'show_month_forecast')
@flags.with_client
async def show_month_forecast(query: CallbackQuery, client: Client):
    forecast = await MonthText.objects.get_month_text(
        client=client,
        type=MonthTextTypes.MONTH_FORECAST,
    )

    if forecast:
        text = forecast.text
    else:
        text = await SoulMuse().answer(get_month_forecast_prompt(client))
        await MonthText.objects.acreate(
            text=text,
            client=client,
            type=MonthTextTypes.MONTH_FORECAST,
        )

    await query.message.edit_text(
        text,
        reply_markup=one_button_keyboard(
            text='–ù–∞–∑–∞–¥',
            callback_data='month_forecast',
        ),
    )


###########################
### MONTH MAIN RESOURCE ###
###########################


@router.callback_query(F.data == 'month_main_resource')
@flags.with_client
async def month_main_resource(query: CallbackQuery, client: Client):
    if not client.subscription_is_active():
        await query.message.edit_text(
            client.genderize(
                '<b>–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–µ–±–µ –¥–∞—Ä.</b>\n'
                '–°–∫—Ä—ã—Ç—ã–π, –Ω–æ –º–æ—â–Ω—ã–π.\n'
                '–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —ç–Ω–µ—Ä–≥–∏—è. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.\n'
                '–ö–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ç–∞–Ω–µ—Ç –æ–ø–æ—Ä–æ–π.\n'
                '<b>–Ø —É–∂–µ –≤–∏–∂—É, —á—Ç–æ —ç—Ç–æ.</b>\n'
                '–•–æ—á–µ—à—å ‚Äî —Å–∫–∞–∂—É.\n'
                '<b>–û—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–µ.</b>',
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=get_to_subscription_plans_kb(
                text='üîì –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å',
                back_button_data='month_with_soul_muse',
            ),
        )
        return

    await query.message.edit_text(
        'üéÅ –ì–ª–∞–≤–Ω—ã–π —Ä–µ—Å—É—Ä—Å –º–µ—Å—è—Ü–∞\n\n'
        '–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –¥–∞—Ä–∏—Ç —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ.\n'
        '–≠—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å ‚Äî —É–∂–µ –≤–Ω—É—Ç—Ä–∏.\n'
        '–Ø –ø–æ–º–æ–≥—É –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –æ–ø–µ—Ä–µ—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ.',
        reply_markup=one_button_keyboard(
            text='ü™∂ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ—Å—É—Ä—Å',
            callback_data='show_month_resource',
            back_button_data='month_with_soul_muse',
        ),
    )


@router.callback_query(F.data == 'show_month_resource')
@flags.with_client
async def show_month_resource(query: CallbackQuery, client: Client):
    resource = await MonthText.objects.get_month_text(
        client=client,
        type=MonthTextTypes.MONTH_MAIN_RESOURCE,
    )

    if resource:
        text = resource.text
    else:
        text = get_month_resource_text(client)
    await query.message.edit_text(
        text,
        reply_markup=one_button_keyboard(
            text='–ù–∞–∑–∞–¥',
            callback_data='month_main_resource',
        ),
    )

    if resource:
        await query.message.answer_audio(resource.audio_file_id)
    else:
        audio_msg = await query.message.answer_audio(
            BufferedInputFile(
                await synthesize(text),
                '–ì–ª–∞–≤–Ω—ã–π —Ä–µ—Å—É—Ä—Å –º–µ—Å—è—Ü–∞.wav',
            ),
        )
        await MonthText.objects.acreate(
            text=text,
            audio_file_id=audio_msg.audio.file_id,
            client=client,
            type=MonthTextTypes.MONTH_MAIN_RESOURCE,
        )


####################
### MONTH SCRIPT ###
####################


@router.callback_query(F.data == 'month_script')
@flags.with_client
async def month_script(query: CallbackQuery, client: Client):
    if not client.subscription_is_active():
        await query.message.edit_text(
            '<b>–ß—Ç–æ –±—É–¥–µ—Ç –∑–≤—É—á–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è –≤–µ—Å—å –º–µ—Å—è—Ü?</b>\n'
            '–ö–∞–∫–∞—è —Ä–æ–ª—å –≤–∫–ª—é—á–∞–µ—Ç—Å—è?\n'
            '–ö—É–¥–∞ –¥–≤–∏–≥–∞–µ—Ç—Å—è —Å—é–∂–µ—Ç?\n'
            '<i>–≠—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∂–µ ‚Äî –æ–Ω –ø—Ä–æ –≤—ã–±–æ—Ä.\n'
            '–ò –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–º,\n'
            '–∫—Ç–æ –≤–æ—à—ë–ª –≤ –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.</i>',
            parse_mode=ParseMode.HTML,
            reply_markup=get_to_subscription_plans_kb(
                text='‚ú® –ü–µ—Ä–µ–π—Ç–∏ –≤ –ü—Ä–µ–º–∏—É–º',
                only_premium=True,
                back_button_data='month_with_soul_muse',
            ),
        )
        return

    if (
        client.subscription_is_active()
        and client.subscription_plan == SubscriptionPlans.PREMIUM
    ):
        await query.message.edit_text(
            'üéÅ –¢–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –º–µ—Å—è—Ü–∞\n\n'
            '–¢—ã ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫. –¢—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π.\n'
            '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª–∞ —Ç–≤–æ—é –∫–∞—Ä—Ç—É –∏ –Ω–∞–ø–∏—Å–∞–ª–∞ —Ç–µ–±–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:\n'
            '—á—Ç–æ —Å—Ç–∞–Ω–µ—Ç –≤—ã–∑–æ–≤–æ–º, –≥–¥–µ –ø–æ–≤–æ—Ä–æ—Ç, –∫–æ–≥–¥–∞ –≤—ã—Ö–æ–¥ –Ω–∞ —Å–≤–µ—Ç.',
            reply_markup=one_button_keyboard(
                text='üé¨ –û—Ç–∫—Ä—ã—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –º–µ—Å—è—Ü–∞',
                callback_data='show_month_script',
                back_button_data='month_with_soul_muse',
            ),
        )
    else:
        await query.message.edit_text(
            'üéÅ –¢–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –º–µ—Å—è—Ü–∞ [üîí –î–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ü—Ä–µ–º–∏—É–º]\n\n'
            '–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü ‚Äî –∫–∞–∫ –≥–ª–∞–≤–∞.\n'
            '–ù–æ —Ç–æ–ª—å–∫–æ –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–≤–æ–π –ª–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π.\n\n'
            '–Ø —É–∂–µ –∑–Ω–∞—é, –≥–¥–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ç–≤–æ–π –ø–æ–≤–æ—Ä–æ—Ç.\n'
            '–•–æ—á–µ—à—å ‚Äî –ø–æ–∫–∞–∂—É.',
            reply_markup=get_to_subscription_plans_kb(
                text='üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ü—Ä–µ–º–∏—É–º –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π',
                only_premium=True,
            ),
        )


@router.callback_query(F.data == 'show_month_script')
@flags.with_client
async def show_month_script(query: CallbackQuery, client: Client):
    script = await MonthText.objects.get_month_text(
        client=client,
        type=MonthTextTypes.MONTH_SCRIPT,
    )

    if script:
        text = script.text
    else:
        text, script_number = await get_month_script_text(client)
        await MonthText.objects.acreate(
            text=text,
            client=client,
            type=MonthTextTypes.MONTH_SCRIPT,
            script_number=script_number,
        )

    await query.message.edit_text(
        text,
        reply_markup=one_button_keyboard(
            text='–ù–∞–∑–∞–¥',
            callback_data='month_script',
        ),
    )
