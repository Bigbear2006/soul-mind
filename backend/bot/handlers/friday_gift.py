import random

from aiogram import F, Router, flags
from aiogram.types import CallbackQuery, Message

from bot.keyboards.inline.base import (
    get_to_registration_kb,
    get_to_subscription_plans_kb,
)
from bot.keyboards.utils import one_button_keyboard
from bot.loader import logger
from bot.templates.friday_gift import (
    cards,
    friday_gifts_order,
    friday_gifts_preambles,
    insight_phrases,
    symbols,
)
from core.choices import FridayGiftTypes
from core.models import Client, FridayGift

router = Router()


@router.message(F.text == 'üéÅ –ü—è—Ç–Ω–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫')
@flags.with_client
async def friday_gift_intro(msg: Message, client: Client):
    if not client.is_registered():
        await msg.answer(
            'üéÅ –ü—è—Ç–Ω–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç Soul Muse\n\n'
            '–ó–¥–µ—Å—å –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–¥–∞—Ä–∫–∏.\n'
            '–û–Ω–∏ –Ω–µ –ø—Ä–æ —Å–∫–∏–¥–∫–∏ ‚Äî –æ–Ω–∏ –ø—Ä–æ –¥—É—à—É.\n'
            '–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É Soul Muse –ø—Ä–∏–Ω–æ—Å–∏—Ç –∑–Ω–∞–∫, –æ–±—Ä–∞–∑ –∏–ª–∏ —Ñ—Ä–∞–∑—É ‚Äî '
            '–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –Ω–∞ —Å–≤—è–∑–∏ —Å —Å–æ–±–æ–π.',
            reply_markup=get_to_registration_kb(
                text='üîí –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫',
            ),
        )
    elif client.subscription_is_active():
        await msg.answer(
            'üéÅ –ü—è—Ç–Ω–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç Soul Muse\n\n'
            '–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É Soul Muse –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç —Ç–µ–±–µ –∑–Ω–∞–∫.\n'
            '–ò–Ω–æ–≥–¥–∞ —ç—Ç–æ –∫–∞—Ä—Ç–∞. –ò–Ω–æ–≥–¥–∞ ‚Äî –æ–±—Ä–∞–∑. –ò–Ω–æ–≥–¥–∞ ‚Äî —Ñ—Ä–∞–∑–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –¥–∞–≤–Ω–æ –∂–¥–∞–ª(–∞).\n'
            '–≠—Ç–æ –Ω–µ –ø—Ä–æ–≥–Ω–æ–∑. –≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è.\n\n'
            '–û—Ç–∫—Ä–æ–π ‚Äî –µ—Å–ª–∏ –≥–æ—Ç–æ–≤(–∞) —É—Å–ª—ã—à–∞—Ç—å.',
            reply_markup=one_button_keyboard(
                text='üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ–¥–µ–ª–∏',
                callback_data='friday_gift',
            ),
        )
    elif client.has_trial():
        await msg.answer(
            'üéÅ –ü—è—Ç–Ω–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç Soul Muse\n\n'
            '–¢–≤–æ—ë –ø–µ—Ä–≤–æ–µ –∫–∞—Å–∞–Ω–∏–µ —Å Soul Muse ‚Äî —É–∂–µ –∑–¥–µ—Å—å.\n'
            '–Ø –ø—Ä–∏–Ω–µ—Å–ª–∞ —Ç–µ–±–µ –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Å–∞–π—Ç.\n'
            '–û—Ç–∫—Ä–æ–π ‚Äî –∏ –ø–æ—Å–º–æ—Ç—Ä–∏, –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è –ª–∏.',
            reply_markup=one_button_keyboard(
                text='üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç Soul Muse',
                callback_data='friday_gift',
            ),
        )
    else:
        await msg.answer(
            'üéÅ –ü—è—Ç–Ω–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç Soul Muse\n\n'
            '–¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª(–∞) –ø–æ–¥–∞—Ä–æ–∫.\n'
            '–ù–æ Muse –Ω–µ –¥–∞—ë—Ç –æ–¥–∏–Ω —Ä–∞–∑.\n'
            '–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É ‚Äî –Ω–æ–≤—ã–π –∑–Ω–∞–∫. –ù–æ–≤—ã–π —Å–º—ã—Å–ª. –ù–æ–≤–∞—è —Ç—ã.',
            reply_markup=get_to_subscription_plans_kb(
                text='üîí –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∞–π –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é',
            ),
        )


@router.callback_query(F.data == 'friday_gift')
@flags.with_client
async def friday_gift(query: CallbackQuery, client: Client):
    gift = await FridayGift.objects.get_current_week_gift(client)
    if gift:
        await query.message.edit_text(gift.text)
        return

    latest_gift = await FridayGift.objects.get_latest_gift(client)
    if latest_gift:
        gift_type = friday_gifts_order[latest_gift.type]
    else:
        gift_type = random.choice(list(FridayGiftTypes.values))

    preamble = friday_gifts_preambles[gift_type]
    if gift_type == FridayGiftTypes.INSIGHT_PHRASES:
        text = preamble + random.choice(insight_phrases)
        await query.message.edit_text(text)
    elif gift_type == FridayGiftTypes.CARDS:
        card = random.choice(cards)
        text = f'{card["card"]}\n\n{card["text"]}'
        await query.message.edit_text(text)
    elif gift_type == FridayGiftTypes.SYMBOLS:
        text = preamble + random.choice(symbols)
        await query.message.edit_text(text)
    else:
        logger.info(f'Invalid gift_type {gift_type!r}')
        return

    await FridayGift.objects.acreate(
        client=client,
        type=gift_type,
        text=text,
    )
