from datetime import date

from aiogram import F, Router, flags
from aiogram.types import Message, CallbackQuery

from bot.calculations import calculate_number
from bot.keyboards.inline import (
    get_to_registration_kb,
    get_to_subscription_plans_kb,
)
from bot.keyboards.utils import one_button_keyboard
from bot.templates.personal_day import moon_phases, personal_day_messages
from core.models import Client

router = Router()

# TODO: –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, —á—Ç–æ –°–æ–≤–µ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π –∏–ª–∏ –¢–≤–æ–π –ª–∏—á–Ω—ã–π  –¥–µ–Ω—å –Ω–µ –æ—Ç–∫—Ä—ã—Ç


@router.message(F.text == 'üìÜ –¢–≤–æ–π –ª–∏—á–Ω—ã–π –¥–µ–Ω—å')
@flags.with_client
async def personal_day_preview(msg: Message, client: Client):
    if not client.is_registered():
        await msg.answer(
            'üìÜ –¢–≤–æ–π –ª–∏—á–Ω—ã–π –¥–µ–Ω—å\n\n'
            '–£ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –µ—Å—Ç—å —Å–≤–æ–π –∫–æ–¥.\n'
            '–Ø –º–æ–≥—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π ‚Äî –Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Ç—ã –¥–æ–ª–∂–µ–Ω(–Ω–∞) –ø–æ—è–≤–∏—Ç—å—Å—è.\n\n'
            '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫—É–¥–∞ –≤–µ–¥—ë—Ç —Ç–≤–æ–π –¥–µ–Ω—å.',
            reply_markup=get_to_registration_kb(
                text='üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø',
            ),
        )
    elif client.subscription_is_active():
        await msg.answer(
            'üìÜ –¢–≤–æ–π –ª–∏—á–Ω—ã–π –¥–µ–Ω—å\n\n'
            '–¢—ã –Ω–µ —Å–ª—É—á–∞–π–Ω–æ –∑–¥–µ—Å—å –∏ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ —Å–µ–π—á–∞—Å.\n'
            '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é —Ç–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é ‚Äî\n'
            '–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–∏—Ñ—Ä, –∑–≤—ë–∑–¥, —Ä–∏—Ç–º–∞ –¥—É—à–∏.\n\n'
            '–û—Ç–∫—Ä–æ–π –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π, —Å —á–µ–º —Ç—ã –≤—Ö–æ–¥–∏—à—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å.',
            reply_markup=one_button_keyboard(
                text='üåû –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑',
                callback_data='personal_day',
            ),
        )
    elif client.has_trial():
        await msg.answer(
            'üìÜ –¢–≤–æ–π –ª–∏—á–Ω—ã–π –¥–µ–Ω—å\n\n'
            '–≠—Ç–æ—Ç –¥–µ–Ω—å –≥–æ–≤–æ—Ä–∏—Ç –Ω–∞ —Ç–≤–æ—ë–º —è–∑—ã–∫–µ.\n'
            '–•–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å, —Å –∫–∞–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π —Ç—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è(–∞—Å—å) —Å–µ–≥–æ–¥–Ω—è?\n\n'
            '–Ø —Å–æ–±—Ä–∞–ª–∞ –≤—Å—ë: —Ü–∏—Ñ—Ä—ã, –∑–≤—ë–∑–¥—ã, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç–º—ã.\n'
            '–û—Ç–∫—Ä–æ–π ‚Äî –∏ –ø—Ä–æ–∂–∏–≤–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.',
            reply_markup=one_button_keyboard(
                text='üåû –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–Ω—è',
                callback_data='personal_day',
            ),
        )
    else:
        await msg.answer(
            'üìÜ –¢–≤–æ–π –ª–∏—á–Ω—ã–π –¥–µ–Ω—å\n\n'
            '–¢–≤–æ–∏ –¥–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –∑–≤—É—á–∞—Ç –≤ —Ç–∏—à–∏–Ω–µ.\n'
            '–¢—ã —É–∂–µ —Å–ª—ã—à–∞–ª(–∞), –∫–∞–∫ –¥–µ–Ω—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–º.\n\n'
            '–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –¢–æ–≥–¥–∞ –¥–∞–π —Å–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ–±–µ.',
            reply_markup=get_to_subscription_plans_kb(
                text='üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã',
            ),
        )


@router.callback_query(F.data == 'personal_day')
@flags.with_client
async def personal_day(query: CallbackQuery, client: Client):
    phase = moon_phases[
        date.today().strftime('%d.%m.%Y')
    ]  # for test: '10.05.2025'
    number = calculate_number(str(client.birth.date()), ())
    await query.message.edit_text(
        personal_day_messages[phase][number],
    )
