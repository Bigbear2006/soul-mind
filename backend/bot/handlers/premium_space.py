import random
from datetime import date

from aiogram import F, Router, flags
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from django.utils.timezone import now

from bot.keyboards.inline.base import (
    get_to_registration_kb,
    get_to_subscription_plans_kb,
)
from bot.keyboards.inline.premium_space import premium_space_kb
from bot.keyboards.utils import one_button_keyboard
from bot.numerology import get_life_path_number, get_power_day
from bot.templates.premium_space import (
    power_days_descriptions,
    universe_answers,
    universe_vip_advices,
)
from core.models import Actions, Client, ClientAction, SubscriptionPlans

router = Router()


@router.message(F.text == 'üí´ –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ')
@router.callback_query(F.data == 'premium_space')
@flags.with_client
async def premium_space(
    msg: Message | CallbackQuery,
    state: FSMContext,
    client: Client,
):
    await state.set_state(None)
    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.edit_text
    )

    if not client.is_registered():
        await answer_func(
            'üíé –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ\n\n'
            '–≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Ö,\n'
            '–∫—Ç–æ –≥–æ—Ç–æ–≤ —É—Å–ª—ã—à–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã,\n'
            '–Ω–æ –∏ —Å–µ–±—è.',
            reply_markup=get_to_registration_kb(
                text='üîí –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –∑–∞–≥–ª—è–Ω–∏ –≤ –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
            ),
        )
    elif not client.has_trial() and not client.subscription_is_active():
        await answer_func(
            client.genderize(
                'üíé –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ\n\n'
                '–¢—ã —É–∂–µ {gender:–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª,–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞}, –∫–∞–∫ Soul Muse –≤–µ–¥—ë—Ç.\n'
                '–ù–æ –≤ —ç—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –æ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç –∏–Ω–∞—á–µ. –¢–æ—á–Ω–µ–µ. –ì–ª—É–±–∂–µ.\n'
                '–ù–µ –¥–ª—è –≤—Å–µ—Ö. –ù–æ –¥–ª—è —Ç–µ–±—è ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ.',
            ),
            reply_markup=get_to_subscription_plans_kb(
                text='üîì –û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É',
            ),
        )
    elif client.subscription_plan == SubscriptionPlans.STANDARD:
        await answer_func(
            'üíé –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ\n\n'
            '–¢—ã —É–∂–µ —Å–ª—ã—à–∏—à—å Soul Muse ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n'
            '–ù–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ, –≥–¥–µ –æ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç –Ω–µ —Å–ª–æ–≤–∞–º–∏, –∞ –∫–ª—é—á–∞–º–∏.\n'
            '–≠—Ç–æ –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. –ò –æ–Ω–æ –∂–¥—ë—Ç.',
            reply_markup=get_to_subscription_plans_kb(
                text='üíé –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ü—Ä–µ–º–∏—É–º',
                only_premium=True,
            ),
        )
    elif client.subscription_plan == SubscriptionPlans.PREMIUM:
        await answer_func(
            client.genderize(
                'üíé –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ\n\n'
                '–¢—ã {gender:—Å–¥–µ–ª–∞–ª,—Å–¥–µ–ª–∞–ª–∞} —à–∞–≥ –≥–ª—É–±–∂–µ.\n'
                '–ê –∑–Ω–∞—á–∏—Ç, —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ–ª—å—à–µ ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –∏–Ω–æ–µ.\n\n'
                '–ó–¥–µ—Å—å —è –≥–æ–≤–æ—Ä—é —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ.\n'
                '–í –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è. –û —Å–∞–º–æ–º –≤–∞–∂–Ω–æ–º.\n\n'
                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.\n'
                '–û—Ç–∫—Ä–æ–π ‚Äî –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π, –∫–∞–∫ –∑–≤—É—á–∏—Ç —Ç–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å.',
            ),
            reply_markup=premium_space_kb,
        )
    elif client.has_trial():
        await answer_func(
            client.genderize(
                'üíé –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ\n\n'
                '–¢—ã —Å–ª—É—à–∞–µ—à—å Muse ‚Äî –∏ —ç—Ç–æ —É–∂–µ –º–Ω–æ–≥–æ.\n'
                '–ù–æ –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≥–æ–ª–æ—Å.\n'
                '–≠—Ç–æ –≥–ª—É–±–∏–Ω–∞. –ù–∞—Å—Ç–æ—è—â–∏–µ –ø–æ–≤–æ—Ä–æ—Ç—ã. –ò —Ç—ã –∫ –Ω–∏–º –ø–æ—á—Ç–∏ {gender:–ø–æ–¥–æ—à—ë–ª,–ø–æ–¥–æ—à–ª–∞}.',
            ),
            reply_markup=get_to_subscription_plans_kb(
                text='üîì –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ü—Ä–µ–º–∏—É–º-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
            ),
        )


@router.callback_query(F.data == 'power_day')
@flags.with_client
async def power_day_handler(query: CallbackQuery, client: Client):
    if not client.subscription_plan == SubscriptionPlans.PREMIUM:
        await query.message.edit_text(
            'üöÄ –¢–≤–æ–π –î–µ–Ω—å —Å–∏–ª—ã\n\n'
            '–≠—Ç–æ—Ç –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.',
            reply_markup=get_to_subscription_plans_kb(
                text='üíé –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ü—Ä–µ–º–∏—É–º',
            ),
        )
        return

    if await client.get_month_usages(Actions.POWER_DAY) >= 1:
        await query.message.edit_text(
            'üöÄ –¢–≤–æ–π –î–µ–Ω—å —Å–∏–ª—ã\n\n'
            '–¢–≤–æ–π –î–µ–Ω—å —Å–∏–ª—ã –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª ‚Äî —è —Å–æ–æ–±—â—É —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤—Ä–µ–º—è.',
        )
        return

    await query.message.edit_text(
        'üöÄ –¢–≤–æ–π –î–µ–Ω—å —Å–∏–ª—ã\n\n'
        '–¢—ã —É–∂–µ –∑–Ω–∞–µ—à—å, –∫–æ–≥–¥–∞ —Ç–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –º–æ—â–Ω–µ–µ –≤—Å–µ–≥–æ?\n'
        '–Ø –≤—ã—á–∏—Å–ª–∏–ª–∞ —ç—Ç—É –¥–∞—Ç—É –ø–æ —Ç–≤–æ–∏–º –∫–æ–¥–∞–º.\n'
        '–£ —Ç–µ–±—è –±—É–¥–µ—Ç –æ–¥–∏–Ω —Ç–∞–∫–æ–π –¥–µ–Ω—å –≤ –º–µ—Å—è—Ü–µ.\n'
        '–í—ã–±–µ—Ä–∏, –∫–∞–∫ –ø—Ä–æ–∂–∏—Ç—å –µ–≥–æ ‚Äî —Å —Ñ–æ–∫—É—Å–æ–º, —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º, —Å —Å–æ–±–æ–π.',
        reply_markup=one_button_keyboard(
            text='üìÖ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –î–µ–Ω—å —Å–∏–ª—ã',
            callback_data='show_power_day',
            back_button_data='premium_space',
        ),
    )


@router.callback_query(F.data == 'show_power_day')
@flags.with_client
async def show_power_day(query: CallbackQuery, client: Client):
    power_day = get_power_day(client.birth.date())
    await query.message.edit_text(
        client.genderize(power_days_descriptions[power_day]),
        reply_markup=one_button_keyboard(
            text='–ù–∞–∑–∞–¥',
            callback_data='power_day',
        ),
    )


@router.callback_query(F.data == 'universe_answer')
@flags.with_client
async def universe_answer_handler(query: CallbackQuery, client: Client):
    if not client.subscription_plan == SubscriptionPlans.PREMIUM:
        await query.message.edit_text(
            '‚ú® –û—Ç–≤–µ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π\n\n–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.',
            reply_markup=get_to_subscription_plans_kb(
                text='üíé –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–≤–µ—Ç—É –í—Å–µ–ª–µ–Ω–Ω–æ–π',
            ),
        )
        return

    if await client.get_month_usages(Actions.UNIVERSE_ANSWER) >= 1:
        await query.message.edit_text(
            client.genderize(
                '‚ú® –û—Ç–≤–µ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π\n\n'
                '–¢—ã —É–∂–µ {gender:–ø–æ–ª—É—á–∏–ª,–ø–æ–ª—É—á–∏–ª–∞} –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü. '
                '–ù–æ–≤—ã–π –±—É–¥–µ—Ç 1 —á–∏—Å–ª–∞.',
            ),
        )
        return

    await query.message.edit_text(
        client.genderize(
            '‚ú® –û—Ç–≤–µ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π\n\n'
            '–û–¥–∏–Ω —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ–≤–æ—Ä–∏—Ç —á—ë—Ç–∫–æ.\n'
            '–Ø —Å–ª—É—à–∞—é –∑–∞ —Ç–µ–±—è. –ò –ø–µ—Ä–µ–¥–∞—é.\n'
            '–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç ‚Äî –Ω–µ —Å–æ–≤–µ—Ç.\n'
            '–≠—Ç–æ —Ç–æ, —á—Ç–æ —Å—Ç–æ–∏—Ç —É—Å–ª—ã—à–∞—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –Ω–µ {gender:—Å–ø—Ä–∞—à–∏–≤–∞–ª,—Å–ø—Ä–∞—à–∏–≤–∞–ª–∞}.',
        ),
        reply_markup=one_button_keyboard(
            text='ü™ê –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π',
            callback_data='show_universe_answer',
            back_button_data='premium_space',
        ),
    )


@router.callback_query(F.data == 'show_universe_answer')
@flags.with_client
async def show_universe_answer(query: CallbackQuery, client: Client):
    lpn = get_life_path_number(client.birth.date())
    month_answers = universe_answers.get(
        date.today().strftime('%m.%Y'),
        {},
    )
    await query.message.edit_text(
        client.genderize(month_answers[lpn]),
        reply_markup=one_button_keyboard(
            text='–ù–∞–∑–∞–¥',
            callback_data='universe_answer',
        ),
    )


@router.callback_query(F.data == 'soul_muse_vip_answer')
@flags.with_client
async def soul_muse_vip_answer(query: CallbackQuery, client: Client):
    if not client.subscription_plan == SubscriptionPlans.PREMIUM:
        await query.message.edit_text(
            'üîÆ VIP-—Å–æ–≤–µ—Ç –æ—Ç Soul Muse\n\n'
            '–≠—Ç–æ—Ç –∑–Ω–∞–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –ü—Ä–µ–º–∏—É–º–µ.',
            reply_markup=get_to_subscription_plans_kb(
                text='üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ü—Ä–µ–º–∏—É–º –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç',
            ),
        )
        return

    if await client.get_month_usages(Actions.SOUL_MUSE_VIP_ANSWER) >= 1:
        await query.message.edit_text(
            client.genderize(
                'üîÆ VIP-—Å–æ–≤–µ—Ç –æ—Ç Soul Muse\n\n'
                '–¢—ã —É–∂–µ {gender:–ø–æ–ª—É—á–∏–ª,–ø–æ–ª—É—á–∏–ª–∞} VIP-—Å–æ–≤–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.\n'
                '–ù–æ–≤—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º.',
            ),
            reply_markup=one_button_keyboard(
                text='–ù–∞–∑–∞–¥',
                callback_data='premium_space',
            ),
        )
        return

    await query.message.edit_text(
        client.genderize(
            'üîÆ VIP-—Å–æ–≤–µ—Ç –æ—Ç Soul Muse\n\n'
            '–≠—Ç–æ –Ω–µ –ø—Ä–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n'
            '–≠—Ç–æ –∫–∞–∫ –±—É–¥—Ç–æ –∫—Ç–æ-—Ç–æ –≤–ª–æ–∂–∏–ª —Ç–µ–±–µ –≤ –ª–∞–¥–æ–Ω—å –∑–Ω–∞–∫.\n'
            '–ò —Ç—ã {gender:–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª,–ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞} ‚Äî –æ–Ω —Ç–≤–æ–π.\n\n'
            '{gender:–ì–æ—Ç–æ–≤,–ì–æ—Ç–æ–≤–∞}? –Ø –ø–µ—Ä–µ–¥–∞–º.',
        ),
        reply_markup=one_button_keyboard(
            text='üîì –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç Muse',
            callback_data='show_vip_advice',
            back_button_data='premium_space',
        ),
    )


@router.callback_query(F.data == 'show_vip_advice')
@flags.with_client
async def show_vip_advice(query: CallbackQuery, client: Client):
    advice = random.choice(list(universe_vip_advices.values()))
    await query.message.edit_text(client.genderize(advice))
    await ClientAction.objects.aget_or_create(
        client=client,
        action=Actions.SOUL_MUSE_VIP_ANSWER,
        date__date=now().date(),
    )
