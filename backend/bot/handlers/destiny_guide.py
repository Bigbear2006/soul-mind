from datetime import date, timedelta

from aiogram import F, Router, flags
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery, Message
from django.utils.timezone import now

from bot.keyboards.inline.base import (
    get_to_registration_kb,
    get_to_subscription_plans_kb,
)
from bot.keyboards.inline.destiny_guide import (
    destiny_guide_kb,
    to_destiny_guide_kb,
)
from bot.text_templates.destiny_guide import astro_events, important_days
from core.choices import Actions
from core.models import Client, ClientAction

router = Router()


@router.message(F.text == 'üó∫Ô∏è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å —Å—É–¥—å–±—ã')
@router.callback_query(F.data == 'destiny_guide_intro')
@flags.with_client
async def destiny_guide_intro(msg: Message | CallbackQuery, client: Client):
    answer_func = (
        msg.answer if isinstance(msg, Message) else msg.message.edit_text
    )

    if not client.is_registered():
        await answer_func(
            client.genderize(
                'üó∫Ô∏è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å —Å—É–¥—å–±—ã\n\n'
                '–ó–≤—ë–∑–¥—ã –∑–Ω–∞—é—Ç, –≥–¥–µ —Ç—ã.\n'
                '–ù–æ –ø–æ–∫–∞ —Ç—ã –Ω–µ {gender:–∑–∞—è–≤–∏–ª,–∑–∞—è–≤–∏–ª–∞} –æ —Å–µ–±–µ ‚Äî —è –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∏—Ö –º–∞—Ä—à—Ä—É—Ç.\n\n'
                '–ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –∏ —è –¥–∞–º —Ç–µ–±–µ –∫–∞—Ä—Ç—É —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è.',
            ),
            reply_markup=get_to_registration_kb(
                text='üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø',
            ),
        )
    elif client.subscription_is_active():
        await answer_func(
            'üó∫Ô∏è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å —Å—É–¥—å–±—ã\n\n'
            '–Ø –¥–µ—Ä–∂—É —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ –∫–æ—Å–º–æ—Å–∞ ‚Äî\n'
            '–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü —Å–æ–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è –∫–∞—Ä—Ç—É:\n'
            '–∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –Ω–∞–±–ª—é–¥–∞—Ç—å, –∫–æ–≥–¥–∞ –±–µ—Ä–µ—á—å, –∞ –∫–æ–≥–¥–∞ —Å–∏—è—Ç—å.\n\n'
            '–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è. –í–∞–∂–Ω—ã–µ –¥–Ω–∏. –õ–∏—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.',
            reply_markup=destiny_guide_kb,
        )
    elif client.has_trial():
        await answer_func(
            'üó∫Ô∏è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å —Å—É–¥—å–±—ã\n\n'
            '–†–µ—Ç—Ä–æ–≥—Ä–∞–¥—ã, –∑–∞—Ç–º–µ–Ω–∏—è, –≤–∞–∂–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã ‚Äî\n'
            '—è —Å–æ–±—Ä–∞–ª–∞ –≤—Å—ë, —á—Ç–æ –¥–≤–∏–≥–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.\n'
            '–¢—ã –≤–∏–¥–∏—à—å –≥–ª–∞–≤–Ω–æ–µ. –û—Å—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–∫—Ä–æ–µ—Ç—Å—è, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≥–ª—É–±–∂–µ.\n\n'
            '–•–æ—á–µ—à—å –∑–Ω–∞—Ç—å, —Å –∫–∞–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –≤—Ö–æ–¥–∏—Ç –º–µ—Å—è—Ü?',
            reply_markup=destiny_guide_kb,
        )
    else:
        await answer_func(
            client.genderize(
                'üó∫Ô∏è –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å —Å—É–¥—å–±—ã\n\n'
                '–¢—ã –≤–∏–¥–∏—à—å –≥–ª–∞–≤–Ω–æ–µ ‚Äî\n'
                '—Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥—ã, –∑–∞—Ç–º–µ–Ω–∏—è, –∫–ª—é—á–µ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ–±–∞.\n'
                '–≠—Ç–æ–≥–æ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.\n'
                '–ù–æ —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ‚Ä¶ –∫–æ–≥–¥–∞ —Ç—ã –±—É–¥–µ—à—å {gender:–≥–æ—Ç–æ–≤,–≥–æ—Ç–æ–≤–∞}.\n\n'
                'P.S. –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∞–∂–Ω—ã–º –¥–Ω—è–º –≤ —Ç–≤–æ–∏—Ö —Å—Ñ–µ—Ä–∞—Ö.',
            ),
            reply_markup=destiny_guide_kb,
        )


@router.callback_query(F.data == 'destiny_guide')
@flags.with_client
async def destiny_guide(query: CallbackQuery, client: Client):
    await query.message.edit_text(
        astro_events.get(date.today().strftime('%m.%Y')),
        reply_markup=to_destiny_guide_kb,
    )

    if not client.subscription_is_active():
        await query.message.answer(
            client.genderize(
                '<b>–¢—ã {gender:—É–≤–∏–¥–µ–ª,—É–≤–∏–¥–µ–ª–∞} —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∑–≤–µ–∑–¥—É.</b>\n'
                '–ù–æ –Ω–∞ –Ω–µ–±–µ –∏—Ö –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ.\n'
                '<b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –º–µ—Å—è—Ü–∞</b> ‚Äî –ª–∏—à—å —á–∞—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω—ã.\n'
                '<b>–í–∞–∂–Ω—ã–µ –¥–Ω–∏ –≤ —Ç–≤–æ–∏—Ö —Å—Ñ–µ—Ä–∞—Ö</b>, —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∏–∫–∏, '
                '–º–æ–º–µ–Ω—Ç—ã —è—Å–Ω–æ—Å—Ç–∏ ‚Äî –≤—Å—ë —ç—Ç–æ –∂–¥—ë—Ç –≤ <i>–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ —Å—É–¥—å–±—ã</i>.\n'
                '<b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç –æ–±–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞:</b>\n'
                '‚Äî –∫ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–µ –Ω–µ–±–∞\n'
                '‚Äî –∏ –∫ –≤–∞–∂–Ω—ã–º –ø–æ–≤–æ—Ä–æ—Ç–∞–º –∏–º–µ–Ω–Ω–æ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏\n'
                '–ü–æ—Ä–∞ –≤–∏–¥–µ—Ç—å –≥–ª—É–±–∂–µ.',
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=get_to_subscription_plans_kb(
                text='üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            ),
        )

    current_date = now()
    first_week_day = now() - timedelta(days=current_date.weekday())
    last_week_day = now() + timedelta(days=6)
    await ClientAction.objects.aget_or_create(
        client=client,
        action=Actions.DESTINY_GUIDE,
        date__gte=first_week_day,
        date__lte=last_week_day,
    )


@router.callback_query(F.data == 'important_days')
@flags.with_client
async def important_days_handler(query: CallbackQuery, client: Client):
    if not client.subscription_is_active():
        await query.message.edit_text(
            '–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî –Ω–æ –ø–æ–∫–∞ –Ω–µ –≤–∏–¥–∏—à—å –º–∞—Ä—à—Ä—É—Ç–∞.\n'
            '<i>–í–∞–∂–Ω—ã–µ –¥–Ω–∏</i> ‚Äî —ç—Ç–æ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –º–æ–º–µ–Ω—Ç–æ–≤,'
            '–∫–æ–≥–¥–∞ –ª—É—á—à–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –∂–¥–∞—Ç—å, –≥–æ–≤–æ—Ä–∏—Ç—å, –º–æ–ª—á–∞—Ç—å, –Ω–∞—á–∏–Ω–∞—Ç—å, –∑–∞–≤–µ—Ä—à–∞—Ç—å.\n'
            '‚ú® –≠—Ç–æ –∫–∞—Ä—Ç–∞ —ç–Ω–µ—Ä–≥–∏–π –º–µ—Å—è—Ü–∞ ‚Äî'
            '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏ —Ç–æ—á–Ω–∞—è.\n'
            '<b>–û—Ç–∫—Ä–æ–µ—Ç—Å—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.</b>',
            parse_mode=ParseMode.HTML,
            reply_markup=get_to_subscription_plans_kb(
                text='üîì –•–æ—á—É –≤–∏–¥–µ—Ç—å –∑–Ω–∞–∫–∏',
            ),
        )
        return

    await query.message.edit_text(
        important_days.get(date.today().strftime('%m.%Y')),
        reply_markup=to_destiny_guide_kb,
    )
